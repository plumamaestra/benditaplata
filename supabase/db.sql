--resetear todo
DO $$
DECLARE
    table_record RECORD;
    function_record RECORD;
    trigger_record RECORD;
     function_name TEXT;
BEGIN
    -- Eliminar todas las tablas
    FOR table_record IN (SELECT table_name FROM information_schema.tables WHERE table_schema = 'public') LOOP
        EXECUTE 'DROP TABLE IF EXISTS public.' || table_record.table_name || ' CASCADE';
    END LOOP;

    -- Eliminar todas las funciones
     FOR function_name IN (SELECT routine_name FROM information_schema.routines WHERE specific_schema = 'public' AND routine_type = 'FUNCTION') LOOP
        EXECUTE 'DROP FUNCTION IF EXISTS public.' || function_name || ' CASCADE';
    END LOOP;

    -- Eliminar todos los triggers
    FOR trigger_record IN (SELECT trigger_name FROM information_schema.triggers WHERE trigger_schema = 'public') LOOP
        EXECUTE 'DROP TRIGGER IF EXISTS public.' || trigger_record.trigger_name || ' ON ALL TABLES CASCADE';
    END LOOP;
END $$;
--

CREATE TABLE public.empresa (
    id bigint NOT NULL,
    nombre text DEFAULT 'Mi Empresa'::text NOT NULL,
    rnc text DEFAULT '-'::text, -- Número de RNC o similar
    telefono text DEFAULT '-'::text,
    direccion_fiscal text DEFAULT '-'::text,
    simbolo_moneda text DEFAULT 'RD$'::text,
    logo text DEFAULT '-'::text,
    id_auth text DEFAULT ''::text NOT NULL,
    id_usuario bigint,
    iso text DEFAULT 'DO'::text, -- Código ISO para República Dominicana
    pais text DEFAULT 'República Dominicana'::text,
    currency text DEFAULT 'DOP'::text, -- Código de moneda para el peso dominicano
    impuesto text DEFAULT 'ITBIS'::text, -- Impuesto aplicado en RD
    valor_impuesto numeric DEFAULT '18'::numeric, -- Porcentaje estándar del ITBIS
    nombre_moneda text DEFAULT 'Peso Dominicano'::text,
    correo text DEFAULT ''::text,
    pie_pagina_ticket text DEFAULT '-'::text
);



ALTER TABLE public.empresa OWNER TO postgres;

CREATE TABLE public.ventas (
    id bigint NOT NULL,
    fecha timestamp without time zone DEFAULT now() NOT NULL,
    monto_total numeric DEFAULT '0'::numeric,
    total_impuestos numeric DEFAULT '0'::numeric,
    id_usuario bigint,
    saldo numeric DEFAULT '0'::numeric,
    pago_con numeric DEFAULT '0'::numeric,
    referencia_tarjeta text DEFAULT '-'::text,
    vuelto numeric DEFAULT '0'::numeric,
    cantidad_productos bigint DEFAULT '0'::bigint,
    sub_total numeric DEFAULT '0'::numeric,
    id_cliente bigint,
    id_sucursal bigint,
    id_empresa bigint,
    estado text DEFAULT 'pendiente'::text,
    valor_impuesto numeric DEFAULT '0'::numeric,
    id_cierre_caja bigint,
    nro_comprobante text DEFAULT gen_random_uuid()
);


ALTER TABLE public.ventas OWNER TO postgres;


--
-- TOC entry 384 (class 1259 OID 144127)
-- Name: almacen; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.almacen (
    id bigint NOT NULL,
    id_sucursal bigint NOT NULL,
    fecha_creacion timestamp without time zone DEFAULT now(),
    delete boolean DEFAULT true,
    nombre text,
    "default" boolean DEFAULT true
);


ALTER TABLE public.almacen OWNER TO postgres;

--
-- TOC entry 385 (class 1259 OID 144130)
-- Name: almacen_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.almacen ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.almacen_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 329 (class 1259 OID 29627)
-- Name: asignacion_sucursal; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.asignacion_sucursal (
    id bigint NOT NULL,
    id_sucursal bigint NOT NULL,
    id_usuario bigint,
    id_caja bigint
);


ALTER TABLE public.asignacion_sucursal OWNER TO postgres;

--
-- TOC entry 330 (class 1259 OID 29630)
-- Name: asignacion_sucursal_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.asignacion_sucursal ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.asignacion_sucursal_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 365 (class 1259 OID 42389)
-- Name: caja; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.caja (
    id bigint NOT NULL,
    descripcion text NOT NULL,
    id_sucursal bigint,
    fecha_creacion timestamp without time zone DEFAULT now(),
    delete boolean DEFAULT true,
    print boolean DEFAULT false
);


ALTER TABLE public.caja OWNER TO postgres;

--
-- TOC entry 366 (class 1259 OID 42392)
-- Name: caja_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.caja ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.caja_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 331 (class 1259 OID 29631)
-- Name: categorias; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.categorias (
    id bigint NOT NULL,
    nombre text NOT NULL,
    color text,
    icono text DEFAULT '-'::text,
    id_empresa bigint
);


ALTER TABLE public.categorias OWNER TO postgres;

--
-- TOC entry 332 (class 1259 OID 29637)
-- Name: categorias_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.categorias ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.categorias_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 367 (class 1259 OID 42455)
-- Name: cierrecaja; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.cierrecaja (
    fechainicio timestamp without time zone DEFAULT now(),
    fechacierre timestamp without time zone DEFAULT now(),
    id_usuario integer,
    total_efectivo_calculado numeric(18,2) DEFAULT '0'::numeric,
    total_efectivo_real numeric(18,2) DEFAULT '0'::numeric,
    estado bigint DEFAULT '0'::bigint,
    diferencia_efectivo numeric(18,2) DEFAULT '0'::numeric,
    id_caja integer,
    id bigint NOT NULL
);


ALTER TABLE public.cierrecaja OWNER TO postgres;

--
-- TOC entry 372 (class 1259 OID 65557)
-- Name: cierrecaja_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.cierrecaja ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.cierrecaja_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 333 (class 1259 OID 29638)
-- Name: clientes_proveedores; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.clientes_proveedores (
    id bigint NOT NULL,
    nombres text DEFAULT '-'::text NOT NULL,
    id_empresa bigint,
    direccion text DEFAULT '-'::text,
    telefono text DEFAULT '-'::text,
    rnc text DEFAULT '-'::text,
    tipo text DEFAULT '-'::text,
    estado text DEFAULT 'activo'::text,
    fecha_registro timestamp without time zone DEFAULT now()
);


ALTER TABLE public.clientes_proveedores OWNER TO postgres;

--
-- TOC entry 334 (class 1259 OID 29651)
-- Name: clientes_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.clientes_proveedores ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.clientes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 335 (class 1259 OID 29652)
-- Name: detalle_venta; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.detalle_venta (
    id bigint NOT NULL,
    id_venta bigint NOT NULL,
    cantidad numeric DEFAULT '1'::numeric,
    precio_venta numeric,
    total numeric,
    descripcion text,
    id_producto bigint,
    precio_compra numeric,
    id_sucursal bigint,
    estado text DEFAULT 'nueva'::text,
    id_almacen bigint
);


ALTER TABLE public.detalle_venta OWNER TO postgres;

--
-- TOC entry 336 (class 1259 OID 29659)
-- Name: detalle_venta_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.detalle_venta ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.detalle_venta_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 337 (class 1259 OID 29660)
-- Name: empresa_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.empresa ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.empresa_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 376 (class 1259 OID 117098)
-- Name: impresoras; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.impresoras (
    id bigint NOT NULL,
    id_caja bigint NOT NULL,
    pc_name text DEFAULT '-'::text,
    ip_local text DEFAULT '-'::text,
    state boolean DEFAULT false,
    name text DEFAULT '-'::text
);


ALTER TABLE public.impresoras OWNER TO postgres;

--
-- TOC entry 377 (class 1259 OID 117101)
-- Name: impresoras_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.impresoras ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.impresoras_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 338 (class 1259 OID 29661)
-- Name: kardex; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.kardex (
    id bigint NOT NULL,
    fecha date NOT NULL,
    motivo text,
    cantidad numeric,
    id_producto bigint,
    id_usuario bigint,
    tipo text,
    estado text,
    total numeric,
    costo numeric,
    habia numeric,
    hay numeric
);


ALTER TABLE public.kardex OWNER TO postgres;

--
-- TOC entry 339 (class 1259 OID 29666)
-- Name: kardex_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.kardex ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.kardex_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 370 (class 1259 OID 65514)
-- Name: metodos_pago; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.metodos_pago (
    id bigint NOT NULL,
    nombre text NOT NULL,
    id_empresa bigint,
    icono text DEFAULT '-'::text,
    ver_nombre boolean DEFAULT true,
    delete_update boolean DEFAULT false
);


ALTER TABLE public.metodos_pago OWNER TO postgres;

--
-- TOC entry 371 (class 1259 OID 65517)
-- Name: metodos_pago_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.metodos_pago ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.metodos_pago_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 340 (class 1259 OID 29667)
-- Name: modulos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.modulos (
    id bigint NOT NULL,
    nombre text DEFAULT '-'::text NOT NULL,
    "check" boolean DEFAULT false,
    descripcion text DEFAULT '-'::text,
    icono text DEFAULT '-'::text,
    link text DEFAULT '-'::text,
    etiquetas text DEFAULT '#configuracion'::text
);


ALTER TABLE public.modulos OWNER TO postgres;

--
-- TOC entry 341 (class 1259 OID 29673)
-- Name: modulos_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.modulos ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.modulos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 368 (class 1259 OID 65502)
-- Name: movimientos_caja; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.movimientos_caja (
    id bigint NOT NULL,
    fecha_movimiento timestamp without time zone DEFAULT now() NOT NULL,
    tipo_movimiento text,
    monto numeric DEFAULT '0'::numeric,
    id_metodo_pago bigint,
    descripcion text DEFAULT '-'::text,
    id_usuario bigint,
    id_cierre_caja bigint,
    id_ventas bigint,
    vuelto numeric DEFAULT '0'::numeric
);


ALTER TABLE public.movimientos_caja OWNER TO postgres;

--
-- TOC entry 369 (class 1259 OID 65505)
-- Name: movimientos_caja_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.movimientos_caja ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.movimientos_caja_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 382 (class 1259 OID 142980)
-- Name: movimientos_stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.movimientos_stock (
    id bigint NOT NULL,
    id_almacen bigint NOT NULL,
    id_producto bigint,
    tipo_movimiento text,
    cantidad numeric,
    fecha timestamp with time zone DEFAULT now(),
    detalle text DEFAULT '-'::text,
    origen text DEFAULT '-'::text
);


ALTER TABLE public.movimientos_stock OWNER TO postgres;

--
-- TOC entry 383 (class 1259 OID 142983)
-- Name: movimientos_stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.movimientos_stock ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.movimientos_stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 342 (class 1259 OID 29674)
-- Name: multiprecios; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.multiprecios (
    id bigint NOT NULL,
    precio_venta numeric NOT NULL,
    id_producto bigint,
    cantidad numeric
);


ALTER TABLE public.multiprecios OWNER TO postgres;

--
-- TOC entry 343 (class 1259 OID 29679)
-- Name: multiprecios_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.multiprecios ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.multiprecios_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 374 (class 1259 OID 98871)
-- Name: permisos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.permisos (
    id bigint NOT NULL,
    id_usuario bigint NOT NULL,
    idmodulo bigint
);


ALTER TABLE public.permisos OWNER TO postgres;

--
-- TOC entry 378 (class 1259 OID 140506)
-- Name: permisos_dafault; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.permisos_dafault (
    id bigint NOT NULL,
    id_rol bigint NOT NULL,
    id_modulo bigint
);


ALTER TABLE public.permisos_dafault OWNER TO postgres;

--
-- TOC entry 379 (class 1259 OID 140509)
-- Name: permisos_dafault_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.permisos_dafault ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.permisos_dafault_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 375 (class 1259 OID 98874)
-- Name: permisos_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.permisos ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.permisos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 344 (class 1259 OID 29680)
-- Name: productos; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.productos (
    id bigint NOT NULL,
    nombre text NOT NULL,
    precio_venta numeric DEFAULT '0'::numeric,
    precio_compra numeric DEFAULT '0'::numeric,
    id_categoria bigint,
    codigo_barras text,
    codigo_interno text,
    id_empresa bigint,
    sevende_por text DEFAULT 'unidad'::text,
    maneja_inventarios boolean DEFAULT false,
    maneja_multiprecios boolean DEFAULT false
);


ALTER TABLE public.productos OWNER TO postgres;

--
-- TOC entry 345 (class 1259 OID 29687)
-- Name: productos_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.productos ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.productos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 346 (class 1259 OID 29688)
-- Name: roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.roles (
    id bigint NOT NULL,
    nombre text NOT NULL
);


ALTER TABLE public.roles OWNER TO postgres;

--
-- TOC entry 347 (class 1259 OID 29693)
-- Name: roles_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.roles ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.roles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 389 (class 1259 OID 232315)
-- Name: serializacion_comprobantes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.serializacion_comprobantes (
    id bigint NOT NULL,
    id_tipo_comprobante bigint NOT NULL,
    serie text,
    cantidad_numeros bigint,
    correlativo bigint,
    sucursal_id bigint,
    por_default boolean DEFAULT false
);


ALTER TABLE public.serializacion_comprobantes OWNER TO postgres;

--
-- TOC entry 390 (class 1259 OID 232318)
-- Name: serializacion_comprobantes_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.serializacion_comprobantes ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.serializacion_comprobantes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 380 (class 1259 OID 142959)
-- Name: stock; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.stock (
    id bigint NOT NULL,
    id_almacen bigint NOT NULL,
    id_producto bigint,
    stock numeric DEFAULT '0'::numeric,
    stock_minimo numeric DEFAULT '0'::numeric,
    ubicacion text DEFAULT '-'::text
);


ALTER TABLE public.stock OWNER TO postgres;

--
-- TOC entry 381 (class 1259 OID 142962)
-- Name: stock_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.stock ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.stock_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 348 (class 1259 OID 29694)
-- Name: sucursales; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.sucursales (
    id bigint NOT NULL,
    nombre text,
    direccion_fiscal text,
    id_empresa bigint,
    delete boolean DEFAULT true
);


ALTER TABLE public.sucursales OWNER TO postgres;

--
-- TOC entry 349 (class 1259 OID 29699)
-- Name: sucursales_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.sucursales ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.sucursales_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 387 (class 1259 OID 232304)
-- Name: tipo_comprobantes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tipo_comprobantes (
    id bigint NOT NULL,
    nombre text NOT NULL,
    destino text
);


ALTER TABLE public.tipo_comprobantes OWNER TO postgres;

--
-- TOC entry 388 (class 1259 OID 232307)
-- Name: tipo_comprobantes_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.tipo_comprobantes ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.tipo_comprobantes_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 350 (class 1259 OID 29700)
-- Name: tipodocumento; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tipodocumento (
    id bigint NOT NULL,
    nombre text DEFAULT ''::text NOT NULL,
    id_empresa bigint
);


ALTER TABLE public.tipodocumento OWNER TO postgres;

--
-- TOC entry 351 (class 1259 OID 29706)
-- Name: tipodocumento_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.tipodocumento ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.tipodocumento_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 352 (class 1259 OID 29707)
-- Name: usuarios; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usuarios (
    id bigint NOT NULL,
    nombres text DEFAULT '-'::text NOT NULL,
    id_tipodocumento bigint,
    nro_doc text DEFAULT '-'::text,
    telefono text DEFAULT '-'::text,
    id_rol bigint,
    correo text DEFAULT '-'::text,
    fecharegistro date DEFAULT now(),
    estado text DEFAULT 'ACTIVO'::text,
    id_auth text,
    tema text DEFAULT 'light'::text
);


ALTER TABLE public.usuarios OWNER TO postgres;

--
-- TOC entry 353 (class 1259 OID 29718)
-- Name: usuarios_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.usuarios ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.usuarios_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 355 (class 1259 OID 29737)
-- Name: ventas_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.ventas ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.ventas_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 4083 (class 2606 OID 144139)
-- Name: almacen almacen_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.almacen
    ADD CONSTRAINT almacen_pkey PRIMARY KEY (id);


--
-- TOC entry 4029 (class 2606 OID 29851)
-- Name: asignacion_sucursal asignacion_sucursal_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.asignacion_sucursal
    ADD CONSTRAINT asignacion_sucursal_pkey PRIMARY KEY (id);


--
-- TOC entry 4061 (class 2606 OID 42399)
-- Name: caja caja_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.caja
    ADD CONSTRAINT caja_pkey PRIMARY KEY (id);


--
-- TOC entry 4031 (class 2606 OID 29853)
-- Name: categorias categorias_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categorias
    ADD CONSTRAINT categorias_pkey PRIMARY KEY (id);


--
-- TOC entry 4065 (class 2606 OID 65564)
-- Name: cierrecaja cierrecaja_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cierrecaja
    ADD CONSTRAINT cierrecaja_pkey PRIMARY KEY (id);


--
-- TOC entry 4033 (class 2606 OID 29855)
-- Name: clientes_proveedores clientes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.clientes_proveedores
    ADD CONSTRAINT clientes_pkey PRIMARY KEY (id);


--
-- TOC entry 4035 (class 2606 OID 29857)
-- Name: detalle_venta detalle_venta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.detalle_venta
    ADD CONSTRAINT detalle_venta_pkey PRIMARY KEY (id);


--
-- TOC entry 4025 (class 2606 OID 29859)
-- Name: empresa empresa_id_auth_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.empresa
    ADD CONSTRAINT empresa_id_auth_key UNIQUE (id_auth);


--
-- TOC entry 4027 (class 2606 OID 29861)
-- Name: empresa empresa_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.empresa
    ADD CONSTRAINT empresa_pkey PRIMARY KEY (id);


--
-- TOC entry 4075 (class 2606 OID 117108)
-- Name: impresoras impresoras_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.impresoras
    ADD CONSTRAINT impresoras_pkey PRIMARY KEY (id);


--
-- TOC entry 4037 (class 2606 OID 29863)
-- Name: kardex kardex_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.kardex
    ADD CONSTRAINT kardex_pkey PRIMARY KEY (id);


--
-- TOC entry 4069 (class 2606 OID 65526)
-- Name: metodos_pago metodos_pago_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.metodos_pago
    ADD CONSTRAINT metodos_pago_pkey PRIMARY KEY (id);


--
-- TOC entry 4039 (class 2606 OID 29865)
-- Name: modulos modulos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.modulos
    ADD CONSTRAINT modulos_pkey PRIMARY KEY (id);


--
-- TOC entry 4067 (class 2606 OID 65513)
-- Name: movimientos_caja movimientos_caja_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_caja
    ADD CONSTRAINT movimientos_caja_pkey PRIMARY KEY (id);


--
-- TOC entry 4081 (class 2606 OID 142990)
-- Name: movimientos_stock movimientos_stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_stock
    ADD CONSTRAINT movimientos_stock_pkey PRIMARY KEY (id);


--
-- TOC entry 4041 (class 2606 OID 29867)
-- Name: multiprecios multiprecios_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.multiprecios
    ADD CONSTRAINT multiprecios_pkey PRIMARY KEY (id);


--
-- TOC entry 4077 (class 2606 OID 140514)
-- Name: permisos_dafault permisos_dafault_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permisos_dafault
    ADD CONSTRAINT permisos_dafault_pkey PRIMARY KEY (id);


--
-- TOC entry 4073 (class 2606 OID 98879)
-- Name: permisos permisos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permisos
    ADD CONSTRAINT permisos_pkey PRIMARY KEY (id);


--
-- TOC entry 4043 (class 2606 OID 29869)
-- Name: productos productos_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.productos
    ADD CONSTRAINT productos_pkey PRIMARY KEY (id);


--
-- TOC entry 4045 (class 2606 OID 29871)
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (id);


--
-- TOC entry 4089 (class 2606 OID 232325)
-- Name: serializacion_comprobantes serializacion_comprobantes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.serializacion_comprobantes
    ADD CONSTRAINT serializacion_comprobantes_pkey PRIMARY KEY (id);


--
-- TOC entry 4079 (class 2606 OID 142969)
-- Name: stock stock_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_pkey PRIMARY KEY (id);


--
-- TOC entry 4047 (class 2606 OID 29873)
-- Name: sucursales sucursales_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sucursales
    ADD CONSTRAINT sucursales_pkey PRIMARY KEY (id);


--
-- TOC entry 4087 (class 2606 OID 232314)
-- Name: tipo_comprobantes tipo_comprobantes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tipo_comprobantes
    ADD CONSTRAINT tipo_comprobantes_pkey PRIMARY KEY (id);


--
-- TOC entry 4051 (class 2606 OID 29875)
-- Name: tipodocumento tipodocumento_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tipodocumento
    ADD CONSTRAINT tipodocumento_pkey PRIMARY KEY (id);


--
-- TOC entry 4085 (class 2606 OID 170051)
-- Name: almacen unique_almacen_por_sucursal; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.almacen
    ADD CONSTRAINT unique_almacen_por_sucursal UNIQUE (id_sucursal, nombre);


--
-- TOC entry 4063 (class 2606 OID 97281)
-- Name: caja unique_caja_por_sucursal; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.caja
    ADD CONSTRAINT unique_caja_por_sucursal UNIQUE (descripcion, id_sucursal);


--
-- TOC entry 4071 (class 2606 OID 74835)
-- Name: metodos_pago unique_nombre_id_empresa; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.metodos_pago
    ADD CONSTRAINT unique_nombre_id_empresa UNIQUE (nombre, id_empresa);


--
-- TOC entry 4049 (class 2606 OID 97258)
-- Name: sucursales unique_nombre_por_empresa; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sucursales
    ADD CONSTRAINT unique_nombre_por_empresa UNIQUE (nombre, id_empresa);


--
-- TOC entry 4057 (class 2606 OID 232282)
-- Name: ventas unique_nrocomprobante_id_sucursal; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ventas
    ADD CONSTRAINT unique_nrocomprobante_id_sucursal UNIQUE (nro_comprobante, id_sucursal);


--
-- TOC entry 4053 (class 2606 OID 29877)
-- Name: usuarios usuarios_id_auth_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_id_auth_key UNIQUE (id_auth);


--
-- TOC entry 4055 (class 2606 OID 29879)
-- Name: usuarios usuarios_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_pkey PRIMARY KEY (id);


--
-- TOC entry 4059 (class 2606 OID 29881)
-- Name: ventas ventas_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ventas
    ADD CONSTRAINT ventas_pkey PRIMARY KEY (id);


--
-- TOC entry 4127 (class 2606 OID 144140)
-- Name: almacen almacen_id_sucursal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.almacen
    ADD CONSTRAINT almacen_id_sucursal_fkey FOREIGN KEY (id_sucursal) REFERENCES public.sucursales(id) ON DELETE CASCADE;


--
-- TOC entry 4091 (class 2606 OID 97422)
-- Name: asignacion_sucursal asignacion_sucursal_id_caja_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.asignacion_sucursal
    ADD CONSTRAINT asignacion_sucursal_id_caja_fkey FOREIGN KEY (id_caja) REFERENCES public.caja(id) ON DELETE CASCADE;


--
-- TOC entry 4092 (class 2606 OID 30015)
-- Name: asignacion_sucursal asignacion_sucursal_id_sucursal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.asignacion_sucursal
    ADD CONSTRAINT asignacion_sucursal_id_sucursal_fkey FOREIGN KEY (id_sucursal) REFERENCES public.sucursales(id) ON DELETE CASCADE;


--
-- TOC entry 4093 (class 2606 OID 30020)
-- Name: asignacion_sucursal asignacion_sucursal_id_usuario_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.asignacion_sucursal
    ADD CONSTRAINT asignacion_sucursal_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id) ON DELETE CASCADE;


--
-- TOC entry 4110 (class 2606 OID 70295)
-- Name: caja caja_id_sucursal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.caja
    ADD CONSTRAINT caja_id_sucursal_fkey FOREIGN KEY (id_sucursal) REFERENCES public.sucursales(id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- TOC entry 4111 (class 2606 OID 70343)
-- Name: cierrecaja cierrecaja_id_caja_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cierrecaja
    ADD CONSTRAINT cierrecaja_id_caja_fkey FOREIGN KEY (id_caja) REFERENCES public.caja(id) ON DELETE CASCADE;


--
-- TOC entry 4112 (class 2606 OID 70348)
-- Name: cierrecaja cierrecaja_id_usuario_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.cierrecaja
    ADD CONSTRAINT cierrecaja_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id) ON DELETE CASCADE;


--
-- TOC entry 4096 (class 2606 OID 97367)
-- Name: detalle_venta detalle_venta_id_sucursal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.detalle_venta
    ADD CONSTRAINT detalle_venta_id_sucursal_fkey FOREIGN KEY (id_sucursal) REFERENCES public.sucursales(id) ON DELETE CASCADE;


--
-- TOC entry 4090 (class 2606 OID 30025)
-- Name: empresa empresa_id_usuario_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.empresa
    ADD CONSTRAINT empresa_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id) ON DELETE CASCADE;


--
-- TOC entry 4120 (class 2606 OID 117109)
-- Name: impresoras impresoras_id_caja_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.impresoras
    ADD CONSTRAINT impresoras_id_caja_fkey FOREIGN KEY (id_caja) REFERENCES public.caja(id) ON DELETE CASCADE;


--
-- TOC entry 4117 (class 2606 OID 70290)
-- Name: metodos_pago metodos_pago_id_empresa_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.metodos_pago
    ADD CONSTRAINT metodos_pago_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES public.empresa(id) ON DELETE CASCADE;


--
-- TOC entry 4113 (class 2606 OID 70353)
-- Name: movimientos_caja movimientos_caja_id_cierre_caja_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_caja
    ADD CONSTRAINT movimientos_caja_id_cierre_caja_fkey FOREIGN KEY (id_cierre_caja) REFERENCES public.cierrecaja(id) ON DELETE CASCADE;


--
-- TOC entry 4114 (class 2606 OID 70358)
-- Name: movimientos_caja movimientos_caja_id_metodo_pago_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_caja
    ADD CONSTRAINT movimientos_caja_id_metodo_pago_fkey FOREIGN KEY (id_metodo_pago) REFERENCES public.metodos_pago(id) ON DELETE CASCADE;


--
-- TOC entry 4115 (class 2606 OID 70363)
-- Name: movimientos_caja movimientos_caja_id_usuario_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_caja
    ADD CONSTRAINT movimientos_caja_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id) ON DELETE CASCADE;


--
-- TOC entry 4116 (class 2606 OID 66742)
-- Name: movimientos_caja movimientos_caja_id_ventas_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_caja
    ADD CONSTRAINT movimientos_caja_id_ventas_fkey FOREIGN KEY (id_ventas) REFERENCES public.ventas(id) ON DELETE CASCADE;


--
-- TOC entry 4125 (class 2606 OID 157654)
-- Name: movimientos_stock movimientos_stock_id_almacen_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_stock
    ADD CONSTRAINT movimientos_stock_id_almacen_fkey FOREIGN KEY (id_almacen) REFERENCES public.almacen(id) ON DELETE CASCADE;


--
-- TOC entry 4126 (class 2606 OID 142996)
-- Name: movimientos_stock movimientos_stock_id_producto_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.movimientos_stock
    ADD CONSTRAINT movimientos_stock_id_producto_fkey FOREIGN KEY (id_producto) REFERENCES public.productos(id) ON DELETE CASCADE;


--
-- TOC entry 4101 (class 2606 OID 30030)
-- Name: multiprecios multiprecios_id_producto_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.multiprecios
    ADD CONSTRAINT multiprecios_id_producto_fkey FOREIGN KEY (id_producto) REFERENCES public.productos(id);


--
-- TOC entry 4121 (class 2606 OID 140520)
-- Name: permisos_dafault permisos_dafault_id_modulo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permisos_dafault
    ADD CONSTRAINT permisos_dafault_id_modulo_fkey FOREIGN KEY (id_modulo) REFERENCES public.modulos(id) ON DELETE CASCADE;


--
-- TOC entry 4122 (class 2606 OID 140515)
-- Name: permisos_dafault permisos_dafault_id_rol_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permisos_dafault
    ADD CONSTRAINT permisos_dafault_id_rol_fkey FOREIGN KEY (id_rol) REFERENCES public.roles(id) ON DELETE CASCADE;


--
-- TOC entry 4118 (class 2606 OID 98880)
-- Name: permisos permisos_id_usuario_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permisos
    ADD CONSTRAINT permisos_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id) ON DELETE CASCADE;


--
-- TOC entry 4119 (class 2606 OID 98885)
-- Name: permisos permisos_idmodulo_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.permisos
    ADD CONSTRAINT permisos_idmodulo_fkey FOREIGN KEY (idmodulo) REFERENCES public.modulos(id) ON DELETE CASCADE;


--
-- TOC entry 4094 (class 2606 OID 30045)
-- Name: categorias public_categorias_id_empresa_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.categorias
    ADD CONSTRAINT public_categorias_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES public.empresa(id) ON DELETE CASCADE;


--
-- TOC entry 4095 (class 2606 OID 30050)
-- Name: clientes_proveedores public_clientes_id_empresa_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.clientes_proveedores
    ADD CONSTRAINT public_clientes_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES public.empresa(id) ON DELETE CASCADE;


--
-- TOC entry 4097 (class 2606 OID 30055)
-- Name: detalle_venta public_detalle_venta_id_producto_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.detalle_venta
    ADD CONSTRAINT public_detalle_venta_id_producto_fkey FOREIGN KEY (id_producto) REFERENCES public.productos(id);


--
-- TOC entry 4098 (class 2606 OID 30065)
-- Name: detalle_venta public_detalle_venta_id_venta_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.detalle_venta
    ADD CONSTRAINT public_detalle_venta_id_venta_fkey FOREIGN KEY (id_venta) REFERENCES public.ventas(id) ON DELETE CASCADE;


--
-- TOC entry 4099 (class 2606 OID 30070)
-- Name: kardex public_kardex_id_producto_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.kardex
    ADD CONSTRAINT public_kardex_id_producto_fkey FOREIGN KEY (id_producto) REFERENCES public.productos(id) ON DELETE CASCADE;


--
-- TOC entry 4100 (class 2606 OID 30075)
-- Name: kardex public_kardex_id_usuario_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.kardex
    ADD CONSTRAINT public_kardex_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id);


--
-- TOC entry 4102 (class 2606 OID 30080)
-- Name: productos public_productos_id_categoria_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.productos
    ADD CONSTRAINT public_productos_id_categoria_fkey FOREIGN KEY (id_categoria) REFERENCES public.categorias(id) ON DELETE CASCADE;


--
-- TOC entry 4103 (class 2606 OID 30085)
-- Name: productos public_productos_id_empresa_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.productos
    ADD CONSTRAINT public_productos_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES public.empresa(id) ON DELETE CASCADE;


--
-- TOC entry 4107 (class 2606 OID 30090)
-- Name: ventas public_ventas_id_cliente_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ventas
    ADD CONSTRAINT public_ventas_id_cliente_fkey FOREIGN KEY (id_cliente) REFERENCES public.clientes_proveedores(id);


--
-- TOC entry 4128 (class 2606 OID 232332)
-- Name: serializacion_comprobantes serializacion_comprobantes_id_tipo_comprobante_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.serializacion_comprobantes
    ADD CONSTRAINT serializacion_comprobantes_id_tipo_comprobante_fkey FOREIGN KEY (id_tipo_comprobante) REFERENCES public.tipo_comprobantes(id) ON DELETE CASCADE;


--
-- TOC entry 4129 (class 2606 OID 248003)
-- Name: serializacion_comprobantes serializacion_comprobantes_sucursal_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.serializacion_comprobantes
    ADD CONSTRAINT serializacion_comprobantes_sucursal_id_fkey FOREIGN KEY (sucursal_id) REFERENCES public.sucursales(id) ON DELETE CASCADE;


--
-- TOC entry 4123 (class 2606 OID 144146)
-- Name: stock stock_id_almacen_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_id_almacen_fkey FOREIGN KEY (id_almacen) REFERENCES public.almacen(id) ON DELETE CASCADE;


--
-- TOC entry 4124 (class 2606 OID 142975)
-- Name: stock stock_id_producto_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.stock
    ADD CONSTRAINT stock_id_producto_fkey FOREIGN KEY (id_producto) REFERENCES public.productos(id) ON DELETE CASCADE;


--
-- TOC entry 4104 (class 2606 OID 30110)
-- Name: sucursales sucursales_id_empresa_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.sucursales
    ADD CONSTRAINT sucursales_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES public.empresa(id) ON DELETE CASCADE;


--
-- TOC entry 4105 (class 2606 OID 30115)
-- Name: tipodocumento tipodocumento_id_empresa_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tipodocumento
    ADD CONSTRAINT tipodocumento_id_empresa_fkey FOREIGN KEY (id_empresa) REFERENCES public.empresa(id) ON DELETE CASCADE;


--
-- TOC entry 4106 (class 2606 OID 30120)
-- Name: usuarios usuarios_id_rol_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuarios
    ADD CONSTRAINT usuarios_id_rol_fkey FOREIGN KEY (id_rol) REFERENCES public.roles(id);


--
-- TOC entry 4108 (class 2606 OID 97372)
-- Name: ventas ventas_id_cierre_caja_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ventas
    ADD CONSTRAINT ventas_id_cierre_caja_fkey FOREIGN KEY (id_cierre_caja) REFERENCES public.cierrecaja(id) ON DELETE CASCADE;


--
-- TOC entry 4109 (class 2606 OID 71472)
-- Name: ventas ventas_id_usuario_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ventas
    ADD CONSTRAINT ventas_id_usuario_fkey FOREIGN KEY (id_usuario) REFERENCES public.usuarios(id) ON DELETE CASCADE;


--
-- TOC entry 4290 (class 3256 OID 30155)
-- Name: categorias Enable delete for users based on user_id; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable delete for users based on user_id" ON public.categorias FOR DELETE TO authenticated USING ((id = id));


--
-- TOC entry 4291 (class 3256 OID 30156)
-- Name: categorias Enable insert for authenticated users only; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert for authenticated users only" ON public.categorias FOR INSERT TO authenticated WITH CHECK (true);


--
-- TOC entry 4292 (class 3256 OID 30157)
-- Name: categorias Enable read access for all users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for all users" ON public.categorias FOR SELECT TO authenticated USING (true);


--
-- TOC entry 4293 (class 3256 OID 30158)
-- Name: categorias Enable update for users based on email; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable update for users based on email" ON public.categorias FOR UPDATE TO authenticated USING ((id = id)) WITH CHECK ((id = id));


--
-- TOC entry 4288 (class 0 OID 29631)
-- Dependencies: 331
-- Name: categorias; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.categorias ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4289 (class 0 OID 29674)
-- Dependencies: 342
-- Name: multiprecios; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.multiprecios ENABLE ROW LEVEL SECURITY;

-- Completed on 2025-04-29 08:38:22

--
-- PostgreSQL database dump complete
--




CREATE FUNCTION public.asignarclientegenerico() RETURNS trigger
    LANGUAGE plpgsql
    AS $$declare _id_cliente int;
begin
 --seleccionamos el id del cliente generico
 select id into _id_cliente from clientes_proveedores where id_empresa = new.id_empresa and tipo='-';
-- editamos el cliente generico
 update ventas
 set id_cliente = _id_cliente  where id_cliente is null and id_empresa=new.id_empresa;
 return new;
end$$;


ALTER FUNCTION public.asignarclientegenerico() OWNER TO postgres;




--
-- TOC entry 627 (class 1255 OID 29460)
-- Name: buscarproductos(integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.buscarproductos(_id_empresa integer, buscador text) RETURNS TABLE(id integer, nombre text, precio_venta numeric, precio_compra numeric, id_categoria integer, sevende_por text, codigo_barras text, codigo_interno text, id_empresa integer, maneja_inventarios boolean, maneja_multiprecios boolean, p_venta text, p_compra text, categoria text)
    LANGUAGE sql
    AS $$
select p.id,
 p.nombre,p.precio_venta,p.precio_compra,p.id_categoria,p.sevende_por,p.codigo_barras,p.codigo_interno,p.id_empresa,p.maneja_inventarios,p.maneja_multiprecios,concat(e.simbolo_moneda,' ', p.precio_venta) as p_venta,concat(e.simbolo_moneda,' ', p.precio_compra) as p_compra,c.nombre as categoria
  from productos as p inner join empresa as e on e.id=p.id_empresa
  inner join categorias as c on c.id=p.id_categoria
  where (LOWER(p.nombre) LIKE '%' || LOWER(buscador) || '%' 
    OR LOWER(p.codigo_barras) LIKE '%' || LOWER(buscador) || '%'
    OR LOWER(p.codigo_interno) LIKE '%' || LOWER(buscador) || '%')
    AND p.id_empresa = _id_empresa
    ORDER BY p.nombre ASC
    LIMIT 10;
$$;


ALTER FUNCTION public.buscarproductos(_id_empresa integer, buscador text) OWNER TO postgres;

--
-- TOC entry 628 (class 1255 OID 29461)
-- Name: buscarproductoslectora(integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--







CREATE FUNCTION public.buscarproductoslectora(_id_empresa integer, buscador text) RETURNS TABLE(id integer, nombre text, precio_venta numeric, precio_compra numeric, id_categoria integer, sevende_por text, codigo_barras text, codigo_interno text, id_empresa integer, maneja_inventarios boolean, maneja_multiprecios boolean, p_venta text, p_compra text, categoria text)
    LANGUAGE sql
    AS $$
select p.id,
 p.nombre,p.precio_venta,p.precio_compra,p.id_categoria,p.sevende_por,p.codigo_barras,p.codigo_interno,p.id_empresa,p.maneja_inventarios,p.maneja_multiprecios,concat(e.simbolo_moneda,' ', p.precio_venta) as p_venta,concat(e.simbolo_moneda,' ', p.precio_compra) as p_compra,c.nombre as categoria
  from productos as p inner join empresa as e on e.id=p.id_empresa
  inner join categorias as c on c.id=p.id_categoria
  where  
    ( LOWER(p.codigo_barras) = LOWER(buscador)
    OR LOWER(p.codigo_interno) = LOWER(buscador))
    AND p.id_empresa = _id_empresa;
$$;


ALTER FUNCTION public.buscarproductoslectora(_id_empresa integer, buscador text) OWNER TO postgres;

--
-- TOC entry 433 (class 1255 OID 141721)
-- Name: buscarusuariosasignados(integer, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.buscarusuariosasignados(_id_empresa integer, buscador text) RETURNS TABLE(id_asignacion integer, id_usuario integer, usuario text, sucursal text, caja text, rol text, email text, estadouser text)
    LANGUAGE sql
    AS $$
select asignacion_sucursal.id as id_asignacion,
 usuarios.id as id_usuario,
  usuarios.nombres as usuario,
sucursales.nombre as sucursal, 
caja.descripcion as caja,
 roles.nombre as rol , 
 usuarios.correo as email , 
 usuarios.estado as estadouser 
 from asignacion_sucursal 
inner join sucursales on asignacion_sucursal.id_sucursal = sucursales.id
inner join usuarios on asignacion_sucursal.id_usuario = usuarios.id
inner join roles on usuarios.id_rol = roles.id
inner join caja on asignacion_sucursal.id_caja = caja.id
  where LOWER(usuarios.nombres) LIKE '%' || LOWER(buscador) || '%' and sucursales.id_empresa=_id_empresa and roles.nombre!='superadmin' ;
$$;


ALTER FUNCTION public.buscarusuariosasignados(_id_empresa integer, buscador text) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 354 (class 1259 OID 29719)
-- Name: ventas; Type: TABLE; Schema: public; Owner: postgres
--


--
-- TOC entry 455 (class 1255 OID 271906)
-- Name: confirmar_venta(integer, integer, numeric, integer, character varying, integer, integer, timestamp without time zone, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.confirmar_venta(_id_venta integer, _id_usuario integer, _vuelto numeric, _id_tipo_comprobante integer, _serie character varying, _id_sucursal integer, _id_cliente integer, _fecha timestamp without time zone, _monto_total numeric) RETURNS SETOF public.ventas
    LANGUAGE plpgsql
    AS $$
DECLARE
    nuevo_comprobante TEXT;
BEGIN
  -- Generar número de comprobante automáticamente con el ID del tipo de comprobante
  select generar_nro_comprobante(_id_tipo_comprobante, _serie, _id_sucursal)
  INTO nuevo_comprobante;
   -- Actualizar la venta existente con el número de comprobante, cliente y estado confirmado
  UPDATE ventas
  SET 
      estado = 'confirmada',
      nro_comprobante = nuevo_comprobante,
      id_usuario = _id_usuario,
      vuelto = _vuelto,
      id_cliente = _id_cliente,
      fecha = _fecha,
      monto_total = _monto_total
      WHERE id = _id_venta;
       RETURN QUERY SELECT * FROM ventas WHERE id = _id_venta;
END; 
$$;


ALTER FUNCTION public.confirmar_venta(_id_venta integer, _id_usuario integer, _vuelto numeric, _id_tipo_comprobante integer, _serie character varying, _id_sucursal integer, _id_cliente integer, _fecha timestamp without time zone, _monto_total numeric) OWNER TO postgres;

--
-- TOC entry 466 (class 1255 OID 251440)
-- Name: contarproductosporauth(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.contarproductosporauth(_id_auth text) RETURNS integer
    LANGUAGE sql
    AS $$
  select count(p.id)
  from productos p
  inner join empresa e on e.id = p.id_empresa
  where e.id_auth = _id_auth;
$$;


ALTER FUNCTION public.contarproductosporauth(_id_auth text) OWNER TO postgres;

--
-- TOC entry 502 (class 1255 OID 119908)
-- Name: crearcredencialesuser(text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.crearcredencialesuser(email text, pass text) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
   user_id uuid;
begin
   user_id := gen_random_uuid();
   insert into auth.users (
      id, 
      email, 
      encrypted_password, 
      raw_app_meta_data, 
      created_at, 
      updated_at, -- Incluye el campo updated_at
      instance_id, 
      aud, 
      role, 
      confirmation_token, 
      email_change, 
      email_change_token_new, 
      recovery_token, 
      phone_change, 
      email_confirmed_at
   )
   values (
      user_id,
      email,
      crypt(pass, gen_salt('bf')),
      jsonb_build_object('provider', 'email', 'providers', array['email']),
      now(),
      now(), -- Asigna la hora actual a updated_at
      (SELECT instance_id FROM auth.users WHERE instance_id IS NOT NULL LIMIT 1),
      'authenticated',
      'authenticated',
      '', -- confirmation_token
      '', -- email_change
      '', -- email_change_token_new
      '', -- recovery_token
      '', -- phone_change
      now()
   );
   return user_id;
end;
$$;


ALTER FUNCTION public.crearcredencialesuser(email text, pass text) OWNER TO postgres;

--
-- TOC entry 650 (class 1255 OID 97400)
-- Name: dashboardcajasporsucursalyventas(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboardcajasporsucursalyventas(_id_empresa integer) RETURNS TABLE(sucursal_nombre text, caja_descripcion text, fecha_creacion timestamp without time zone, total_ventas numeric, estadocaja integer, direccionfiscal text, idcaja integer, idsucursal integer, delete boolean)
    LANGUAGE sql
    AS $$
WITH cierres_agrupados AS (
    SELECT
        cc.id_caja,
        MAX(cc.estado) AS estado,
        SUM(COALESCE(v.monto_total, 0)) AS total_ventas
    FROM
        cierrecaja cc
    LEFT JOIN
        ventas v
    ON
        cc.id = v.id_cierre_caja
    GROUP BY
        cc.id_caja
),
cajas_agrupadas AS (
    SELECT
        c.id AS id_caja,
        c.descripcion AS caja_descripcion,
        c.fecha_creacion,
        COALESCE(cg.total_ventas, 0) AS total_ventas,
        COALESCE(cg.estado, 2) AS estado
        
        
    FROM
        caja c
    LEFT JOIN
        cierres_agrupados cg
    ON
        c.id = cg.id_caja
)
SELECT
    s.nombre AS sucursal_nombre,
    ca.caja_descripcion,
    ca.fecha_creacion,
    ca.total_ventas,
    ca.estado AS estadocaja,
    s.direccion_fiscal as direccion_fiscal,
    ca.id_caja as idcaja,
    s.id as idsucursal,
    s.delete as delete


FROM
    sucursales s
INNER JOIN
    caja c
ON
    s.id = c.id_sucursal
LEFT JOIN
    cajas_agrupadas ca
ON
    c.id = ca.id_caja
WHERE
    s.id_empresa = _id_empresa
GROUP BY
    s.nombre, ca.caja_descripcion, ca.fecha_creacion, ca.total_ventas, ca.estado,ca.id_caja,s.id,s.direccion_fiscal,s.delete
ORDER BY
    s.nombre, ca.fecha_creacion;
$$;


ALTER FUNCTION public.dashboardcajasporsucursalyventas(_id_empresa integer) OWNER TO postgres;

--
-- TOC entry 477 (class 1255 OID 228834)
-- Name: dashboardsumarcantidaddetalleventa(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboardsumarcantidaddetalleventa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS numeric
    LANGUAGE sql
    AS $$
SELECT 
    COALESCE(SUM(dv.cantidad), 0) -- Asegura que retorne 0 si no hay ventas
FROM 
    ventas AS v inner join detalle_venta dv on dv.id_venta=v.id
WHERE 
    v.id_empresa = _id_empresa
   AND DATE(v.fecha) >= DATE(_fecha_inicio) -- Convierte a solo fecha
  AND DATE(v.fecha) <= DATE(_fecha_fin);   -- Convierte a solo fecha
$$;


ALTER FUNCTION public.dashboardsumarcantidaddetalleventa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 498 (class 1255 OID 228858)
-- Name: dashboardsumargananciadetalleventa(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboardsumargananciadetalleventa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS numeric
    LANGUAGE sql
    AS $$
SELECT 
    COALESCE(SUM(dv.total - dv.cantidad*precio_compra), 0) -- Asegura que retorne 0 si no hay ventas
FROM 
    ventas AS v inner join detalle_venta dv on dv.id_venta=v.id
WHERE 
    v.id_empresa = _id_empresa
   AND DATE(v.fecha) >= DATE(_fecha_inicio) -- Convierte a solo fecha
  AND DATE(v.fecha) <= DATE(_fecha_fin);   -- Convierte a solo fecha
$$;


ALTER FUNCTION public.dashboardsumargananciadetalleventa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 460 (class 1255 OID 95360)
-- Name: dashboardsumarventaporempresa(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboardsumarventaporempresa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS numeric
    LANGUAGE sql
    AS $$
SELECT
    COALESCE(SUM(v.monto_total), 0) -- Asegura que siempre retorne 0 si no hay ventas
FROM
    ventas AS v
WHERE
    v.id_empresa = _id_empresa
    AND v.fecha >= _fecha_inicio
    AND v.fecha <= (_fecha_fin + INTERVAL '1 day' - INTERVAL '1 second'); -- Incluye el final del día
$$;


ALTER FUNCTION public.dashboardsumarventaporempresa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 443 (class 1255 OID 95338)
-- Name: dashboardsumarventasporempresa(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboardsumarventasporempresa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS numeric
    LANGUAGE sql
    AS $$
SELECT 
    COALESCE(SUM(v.monto_total), 0) -- Asegura que retorne 0 si no hay ventas
FROM 
    ventas AS v
WHERE 
    v.id_empresa = _id_empresa
   AND DATE(v.fecha) >= DATE(_fecha_inicio) -- Convierte a solo fecha
  AND DATE(v.fecha) <= DATE(_fecha_fin);   -- Convierte a solo fecha
$$;


ALTER FUNCTION public.dashboardsumarventasporempresa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 610 (class 1255 OID 95592)
-- Name: dashboardsumarventasporempresaperiodoanterior(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboardsumarventasporempresaperiodoanterior(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS numeric
    LANGUAGE sql
    AS $$
SELECT 
    COALESCE(SUM(v.monto_total), 0) -- Asegura que retorne 0 si no hay ventas
FROM 
    ventas AS v
WHERE 
    v.id_empresa = _id_empresa
   AND DATE(v.fecha) >= DATE(_fecha_inicio) -- Convierte a solo fecha
  AND DATE(v.fecha) <= DATE(_fecha_fin);   -- Convierte a solo fecha
$$;


ALTER FUNCTION public.dashboardsumarventasporempresaperiodoanterior(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 500 (class 1255 OID 95464)
-- Name: dashboardtop5productosmasvendidos(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboardtop5productosmasvendidos(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS TABLE(id_producto integer, nombre_producto text, total_vendido numeric, porcentaje numeric)
    LANGUAGE sql
    AS $$
WITH top_productos AS (
    SELECT
        dv.id_producto,
        p.nombre AS nombre_producto,
        SUM(dv.cantidad) AS total_vendido
    FROM
        detalle_venta AS dv
    INNER JOIN
        ventas AS v
    ON
        dv.id_venta = v.id
    INNER JOIN
        productos AS p
    ON
        dv.id_producto = p.id
    WHERE
        v.id_empresa = _id_empresa
       AND DATE(v.fecha) >= DATE(_fecha_inicio) -- Convierte a solo fecha
  AND DATE(v.fecha) <= DATE(_fecha_fin)   -- Convierte a solo fecha
    GROUP BY
        dv.id_producto, p.nombre
    ORDER BY
        total_vendido DESC
    LIMIT 5
),
total_general AS (
    SELECT
        SUM(total_vendido) AS total
    FROM
        top_productos
)
SELECT
    tp.id_producto,
    tp.nombre_producto,
    tp.total_vendido,
    ROUND((tp.total_vendido / tg.total) * 100, 2) AS porcentaje
FROM
    top_productos tp,
    total_general tg;
$$;


ALTER FUNCTION public.dashboardtop5productosmasvendidos(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 533 (class 1255 OID 95570)
-- Name: dashboartotalventasconfechas(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboartotalventasconfechas(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS TABLE(fecha date, total_ventas numeric)
    LANGUAGE sql
    AS $$
SELECT
    DATE(v.fecha) AS fecha, -- Agrupa por la fecha (sin tiempo)
    COALESCE(SUM(v.monto_total), 0) AS total_ventas -- Calcula el total de ventas
FROM
    ventas AS v
WHERE
    v.id_empresa = _id_empresa -- Filtra por empresa
    AND DATE(v.fecha) >= DATE(_fecha_inicio) -- Convierte a solo fecha
    AND DATE(v.fecha) <= DATE(_fecha_fin)   -- Convierte a solo fecha
GROUP BY
    DATE(v.fecha) -- Agrupa por fecha
ORDER BY
    fecha; -- Ordena por fecha
$$;


ALTER FUNCTION public.dashboartotalventasconfechas(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 646 (class 1255 OID 95614)
-- Name: dashboartotalventasxmetodopago(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.dashboartotalventasxmetodopago(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS TABLE(fecha date, metodo_pago text, total_ventas numeric)
    LANGUAGE sql
    AS $$
SELECT
    DATE(mc.fecha_movimiento) AS fecha, -- Agrupa por la fecha (sin tiempo)
    mp.nombre AS metodo_pago, -- Nombre del método de pago
    COALESCE(SUM(mc.monto), 0) AS total_ventas -- Suma el total de ventas
FROM
    ventas AS v
INNER JOIN
    movimientos_caja AS mc
ON
    v.id = mc.id_ventas -- Relación entre ventas y movimientos de caja
INNER JOIN
    metodos_pago AS mp
ON
    mc.id_metodo_pago = mp.id -- Relación con métodos de pago
WHERE
    v.id_empresa = _id_empresa -- Filtra por empresa
    AND DATE(mc.fecha_movimiento) >= DATE(_fecha_inicio) -- Filtra por fecha de inicio
    AND DATE(mc.fecha_movimiento) <= DATE(_fecha_fin) -- Filtra por fecha de fin
    AND mc.id_ventas IS NOT NULL
GROUP BY
    DATE(mc.fecha_movimiento), mp.nombre -- Agrupa por fecha y método de pago
ORDER BY
    fecha asc; -- Ordena por fecha y luego por total de ventas
$$;


ALTER FUNCTION public.dashboartotalventasxmetodopago(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 447 (class 1255 OID 153318)
-- Name: deletedetalleventa(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.deletedetalleventa() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  -- Si la cantidad es igual a 0, elimina el registro antes del UPDATE
  IF NEW.cantidad = 0 THEN
    DELETE FROM detalle_venta WHERE id = NEW.id;
    
  END IF;

  RETURN NEW; -- Continuar el flujo si la cantidad no es 0
END;
$$;


ALTER FUNCTION public.deletedetalleventa() OWNER TO postgres;

--
-- TOC entry 629 (class 1255 OID 155308)
-- Name: devolverstockaleliminardv(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.devolverstockaleliminardv() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Verificar si el producto tiene inventario gestionado
    IF (SELECT p.maneja_inventarios FROM productos p WHERE p.id = OLD.id_producto) THEN
        -- Incrementar el stock correspondiente en el almacén
        UPDATE stock
        SET stock = stock + OLD.cantidad
        WHERE id_producto = OLD.id_producto
          AND id_almacen = OLD.id_almacen;
    END IF;

    -- Continuar con la operación de eliminación
    RETURN OLD;
END;
$$;


ALTER FUNCTION public.devolverstockaleliminardv() OWNER TO postgres;

--
-- TOC entry 408 (class 1255 OID 153296)
-- Name: editarcantidaddv(integer, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.editarcantidaddv(_id integer, _cantidad numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE detalle_venta
  SET 
    cantidad = _cantidad,
    total = _cantidad * precio_venta
  WHERE id = _id;
END;
$$;


ALTER FUNCTION public.editarcantidaddv(_id integer, _cantidad numeric) OWNER TO postgres;

--
-- TOC entry 635 (class 1255 OID 29464)
-- Name: editarcategorias(text, integer, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.editarcategorias(_nombre text, _id_empresa integer, _color text, _id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
 perform 1 from categorias where id != _id and nombre = _nombre and id_empresa=_id_empresa;
 if found then
  raise exception 'Datos duplicados';
 else
  update categorias
  set
  nombre=_nombre,
  color=_color
  where id = _id;
 end if;  
end;
$$;


ALTER FUNCTION public.editarcategorias(_nombre text, _id_empresa integer, _color text, _id integer) OWNER TO postgres;

--
-- TOC entry 630 (class 1255 OID 29465)
-- Name: editarclientesproveedores(integer, text, integer, text, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.editarclientesproveedores(_id integer, _nombres text, _id_empresa integer, _direccion text, _telefono text, _rnc text, _tipo text) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
 perform 1 from clientes_proveedores where (LOWER(nombres)=LOWER(_nombres) and tipo=_tipo and id!=_id and id_empresa=_id_empresa) or (LOWER(rnc)=LOWER(_rnc) and tipo=_tipo  and id!=_id and id_empresa=_id_empresa);
 if found then
  raise exception 'Datos duplicados';
 else
  update clientes_proveedores
  set
  nombres = _nombres,
        direccion = _direccion,
        telefono = _telefono,
        rnc = _rnc
       
  where id = _id;
 end if;  
end;
$$;


ALTER FUNCTION public.editarclientesproveedores(_id integer, _nombres text, _id_empresa integer, _direccion text, _telefono text, _rnc text, _tipo text) OWNER TO postgres;

--
-- TOC entry 634 (class 1255 OID 29466)
-- Name: editarmarca(text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.editarmarca(_nombre text, _id_empresa integer, _id integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
 perform 1 from marca where nombre=_nombre and id_empresa=_id_empresa and id!=_id;
 if found then
   raise exception 'Datos duplicados';
 else
  update marca
  set nombre=_nombre
  where id=_id;
  end if;
end;
$$;


ALTER FUNCTION public.editarmarca(_nombre text, _id_empresa integer, _id integer) OWNER TO postgres;

--
-- TOC entry 640 (class 1255 OID 29467)
-- Name: editarproductos(integer, text, numeric, numeric, integer, text, text, integer, text, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.editarproductos(_id integer, _nombre text, _precio_venta numeric, _precio_compra numeric, _id_categoria integer, _codigo_barras text, _codigo_interno text, _id_empresa integer, _sevende_por text, _maneja_inventarios boolean) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
 perform 1 from productos where nombre=_nombre and id_empresa=_id_empresa and id!=_id;
 if found then
   raise exception 'Nombre de producto duplicado';  
 else
    perform 1 from productos where (codigo_interno=_codigo_interno and id_empresa=_id_empresa and id!=_id) or 
    (codigo_barras=_codigo_barras
     and id_empresa=_id_empresa and id!=_id);
    if found then
     raise exception 'Codigo de barra ó interno duplicado';
    else
     update  productos set nombre=_nombre,precio_venta=_precio_venta,precio_compra=_precio_compra,id_categoria=_id_categoria,codigo_barras=_codigo_barras,codigo_interno=_codigo_interno,sevende_por=_sevende_por,maneja_inventarios=_maneja_inventarios
     where id=_id;
     end if;
  end if;
end;
$$;


ALTER FUNCTION public.editarproductos(_id integer, _nombre text, _precio_venta numeric, _precio_compra numeric, _id_categoria integer, _codigo_barras text, _codigo_interno text, _id_empresa integer, _sevende_por text, _maneja_inventarios boolean) OWNER TO postgres;

--
-- TOC entry 644 (class 1255 OID 232694)
-- Name: generar_nro_comprobante(integer, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.generar_nro_comprobante(_id_tipo_comprobante integer, _serie text, _id_sucursal integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
    _nuevo_numero INTEGER;
    _nuevo_comprobante TEXT;
    _cantidad_numeros INTEGER;
BEGIN
    -- Obtener el correlativo actual y la cantidad de números usando _id_tipo_comprobante
    SELECT correlativo + 1, cantidad_numeros
    INTO _nuevo_numero, _cantidad_numeros
    FROM serializacion_comprobantes
    WHERE id_tipo_comprobante = _id_tipo_comprobante 
      AND serie = _serie 
      AND sucursal_id = _id_sucursal
    FOR UPDATE;

    -- Actualizar el correlativo en la tabla de serialización
    UPDATE serializacion_comprobantes
    SET correlativo = _nuevo_numero
    WHERE id_tipo_comprobante = _id_tipo_comprobante 
      AND serie = _serie 
      AND sucursal_id = _id_sucursal;

    -- Generar el número de comprobante con ceros a la izquierda
    _nuevo_comprobante := _serie || '-' || LPAD(_nuevo_numero::TEXT, _cantidad_numeros, '0');

    RETURN _nuevo_comprobante;
END;
$$;


ALTER FUNCTION public.generar_nro_comprobante(_id_tipo_comprobante integer, _serie text, _id_sucursal integer) OWNER TO postgres;

--
-- TOC entry 476 (class 1255 OID 214016)
-- Name: incrementarstock(integer, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.incrementarstock(_id integer, cantidad numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE stock SET stock = stock + cantidad WHERE id = _id;
END;
$$;


ALTER FUNCTION public.incrementarstock(_id integer, cantidad numeric) OWNER TO postgres;

--
-- TOC entry 619 (class 1255 OID 58564)
-- Name: insertar_productos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertar_productos() RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    i INT;
    nuevo_codigo_interno TEXT;
    nuevo_codigo_barras TEXT;
BEGIN
    FOR i IN 1..5000 LOOP
        -- Generar códigos únicos usando el ID del ciclo (i) y un prefijo.
        nuevo_codigo_interno := 'INT-' || i || '-' || trunc(random() * 10000)::TEXT;
        nuevo_codigo_barras := 'BAR-' || i || '-' || trunc(random() * 100000)::TEXT;

        -- Insertar cada registro con datos aleatorios y los códigos generados.
        INSERT INTO productos (
            nombre,
            precio_venta,
            precio_compra,
            id_categoria,
            codigo_barras,
            codigo_interno,
            id_empresa,
            sevende_por,
            maneja_inventarios,
            maneja_multiprecios
        ) VALUES (
            'Producto ' || i,                       -- Nombre del producto.
            trunc(random() * 1000 + 1)::NUMERIC,    -- Precio de venta aleatorio.
            trunc(random() * 500 + 1)::NUMERIC,     -- Precio de compra aleatorio.
            2019,                                   -- ID de categoría.
            nuevo_codigo_barras,                    -- Código de barras único.
            nuevo_codigo_interno,                   -- Código interno único.
            6896,                                   -- ID de empresa.
            'unidad',                               -- Se vende por unidad.
            true,                                   -- Maneja inventario.
            false                                   -- No maneja múltiplos.
        );
    END LOOP;
END;
$$;


ALTER FUNCTION public.insertar_productos() OWNER TO postgres;

--
-- TOC entry 639 (class 1255 OID 29468)
-- Name: insertarcategorias(text, text, text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertarcategorias(_nombre text, _color text, _icono text, _id_empresa integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare nuevo_id int;
begin
 perform 1 from categorias where nombre=_nombre and id_empresa=_id_empresa;
 if found then
   raise exception 'Datos duplicados';
 else
   insert into categorias(nombre,color,icono,id_empresa)
   values(_nombre,_color,_icono,_id_empresa)
   returning id into nuevo_id;
   return nuevo_id;
  end if;
end;
$$;


ALTER FUNCTION public.insertarcategorias(_nombre text, _color text, _icono text, _id_empresa integer) OWNER TO postgres;

--
-- TOC entry 638 (class 1255 OID 29469)
-- Name: insertarclientesproveedores(text, integer, text, text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertarclientesproveedores(_nombres text, _id_empresa integer, _direccion text, _telefono text, _rnc text, _tipo text) RETURNS void
    LANGUAGE plpgsql
    AS $$

begin
 perform 1 from clientes_proveedores where (LOWER(nombres)=LOWER(_nombres) and tipo=_tipo) or (LOWER(rnc)=LOWER(_rnc) and tipo=_tipo);
 if found then
   raise exception 'Datos duplicados';
 else
   insert into clientes_proveedores(nombres,id_empresa,direccion,telefono,rnc,tipo)
   values(_nombres,_id_empresa,_direccion,_telefono,_rnc,_tipo);
  end if;
end;
$$;


ALTER FUNCTION public.insertarclientesproveedores(_nombres text, _id_empresa integer, _direccion text, _telefono text, _rnc text, _tipo text) OWNER TO postgres;

--
-- TOC entry 467 (class 1255 OID 164352)
-- Name: insertardetalleventa(integer, numeric, numeric, integer, numeric, text, integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertardetalleventa(_id_venta integer, _cantidad numeric, _precio_venta numeric, _id_producto integer, _precio_compra numeric, _descripcion text, _id_sucursal integer, _id_almacen integer) RETURNS void
    LANGUAGE plpgsql
    AS $$BEGIN
    -- Verificar si el producto ya existe en el detalle de venta
    IF EXISTS (
        SELECT 1
        FROM detalle_venta
        WHERE id_venta = _id_venta
          AND id_producto = _id_producto
          AND id_almacen = _id_almacen
    ) THEN
        -- Si existe, actualizar la cantidad y el total
        UPDATE detalle_venta
        SET cantidad = cantidad + _cantidad,
            total = (cantidad + _cantidad) * _precio_venta
        WHERE id_venta = _id_venta
          AND id_producto = _id_producto
          AND id_almacen = _id_almacen;
    ELSE
        -- Si no existe, insertar un nuevo registro
        INSERT INTO detalle_venta (
            id_venta, id_producto, cantidad, precio_venta, 
            precio_compra, descripcion, total, id_sucursal,id_almacen
        ) VALUES (
            _id_venta, _id_producto, _cantidad, _precio_venta, 
            _precio_compra, _descripcion, _cantidad * _precio_venta, _id_sucursal,_id_almacen
        );
    END IF;
END;$$;


ALTER FUNCTION public.insertardetalleventa(_id_venta integer, _cantidad numeric, _precio_venta numeric, _id_producto integer, _precio_compra numeric, _descripcion text, _id_sucursal integer, _id_almacen integer) OWNER TO postgres;

--
-- TOC entry 442 (class 1255 OID 117118)
-- Name: insertarimpresora(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertarimpresora() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
 insert into impresoras (id_caja)
 values(new.id);
 return new;
end
$$;


ALTER FUNCTION public.insertarimpresora() OWNER TO postgres;

--
-- TOC entry 641 (class 1255 OID 29471)
-- Name: insertarmarca(text, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertarmarca(_nombre text, _id_empresa integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin
 perform 1 from marca where nombre=_nombre and id_empresa=_id_empresa;
 if found then
   raise exception 'Datos duplicados';
 else
   insert into marca(nombre,id_empresa)
   values(_nombre,_id_empresa);
  end if;
end;
$$;


ALTER FUNCTION public.insertarmarca(_nombre text, _id_empresa integer) OWNER TO postgres;

--
-- TOC entry 454 (class 1255 OID 167714)
-- Name: insertarpermisohome(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertarpermisohome() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    id_modulo_home INT;
BEGIN
    -- Verifica si el rol no es 'superadmin' antes de proceder
    IF EXISTS (
        SELECT 1 
        FROM usuarios u 
        INNER JOIN roles r ON r.id = u.id_rol 
        WHERE r.nombre != 'superadmin' AND r.id = NEW.id_rol
    ) THEN
        -- Obtiene el ID del módulo correspondiente al '/'
        SELECT m.id 
        INTO id_modulo_home
        FROM modulos m 
        WHERE m.link = '/';
        
        -- Inserta el permiso en la tabla 'permisos'
        INSERT INTO permisos (id_usuario, idmodulo)
        VALUES (NEW.id, id_modulo_home);
    END IF;

    RETURN NEW;
END;
$$;


ALTER FUNCTION public.insertarpermisohome() OWNER TO postgres;

--
-- TOC entry 669 (class 1255 OID 29472)
-- Name: insertarproductos(text, numeric, numeric, integer, text, text, integer, text, boolean, boolean); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertarproductos(_nombre text, _precio_venta numeric, _precio_compra numeric, _id_categoria integer, _codigo_barras text, _codigo_interno text, _id_empresa integer, _sevende_por text, _maneja_inventarios boolean, _maneja_multiprecios boolean) RETURNS integer
    LANGUAGE plpgsql
    AS $$
declare nuevo_id int;
begin
 perform 1 from productos where nombre=_nombre and id_empresa=_id_empresa;
 if found then
   raise exception 'Nombre de producto duplicado';  
 else
    perform 1 from productos where codigo_interno=_codigo_interno or 
    codigo_barras=_codigo_barras
     and id_empresa=_id_empresa ;
    if found then
     raise exception 'Codigo de barra ó interno duplicado';
    else
     insert into productos(nombre,precio_venta,precio_compra,id_categoria,codigo_barras,codigo_interno,id_empresa,sevende_por,maneja_inventarios,maneja_multiprecios)
     values(_nombre,_precio_venta,_precio_compra,_id_categoria,_codigo_barras,_codigo_interno,_id_empresa,_sevende_por,_maneja_inventarios,_maneja_multiprecios)
     returning id into nuevo_id;
     return nuevo_id;
     end if;
  end if;
end;
$$;


ALTER FUNCTION public.insertarproductos(_nombre text, _precio_venta numeric, _precio_compra numeric, _id_categoria integer, _codigo_barras text, _codigo_interno text, _id_empresa integer, _sevende_por text, _maneja_inventarios boolean, _maneja_multiprecios boolean) OWNER TO postgres;

--
-- TOC entry 412 (class 1255 OID 247955)
-- Name: insertarserializaciones(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertarserializaciones() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
 insert into serializacion_comprobantes (
  id_tipo_comprobante, serie, cantidad_numeros, correlativo, sucursal_id, por_default
)
values 
  (1, 'FAC', 8, 0, NEW.id, false),
  (2, 'B01', 8, 0,  NEW.id, false),
  (3, 'B04', 8, 0,  NEW.id, false),
  (4, 'B03', 8, 0,  NEW.id, false),
  (5, 'B02', 8, 0,  NEW.id, true);
   return NEW;
end
$$;


ALTER FUNCTION public.insertarserializaciones() OWNER TO postgres;

--
-- TOC entry 676 (class 1255 OID 29473)
-- Name: insertpordefecto(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.insertpordefecto() RETURNS trigger
    LANGUAGE plpgsql
    AS $$declare new_id_sucursal int;
declare new_id_tipo_documento int;
declare id_admin_rol INT;
declare new_id_usuario INT;
declare new_id_caja int;
declare new_id_categoria int;
declare item record;
begin


 insert into tipodocumento(nombre,id_empresa)
 values('Generico',new.id)
 returning id into new_id_tipo_documento;
 --mostrar rol admin
 SELECT id INTO id_admin_rol
  FROM roles
  WHERE nombre = 'superadmin';
 --
--usuario admin
  insert into usuarios(nombres,id_tipodocumento,id_rol,correo,id_auth)
 values('Generico',new_id_tipo_documento,id_admin_rol,new.correo,new.id_auth)
 returning id into new_id_usuario;
--
--insertando los permisos al superadmin
for item in
  select id from modulos
  loop
 
    insert into permisos(id_usuario,idmodulo)
    values(new_id_usuario,item.id);  
  end loop;
--update a empresa con el id_usuario
 update empresa
 set id_usuario=new_id_usuario
 where id_usuario is null;
--
 insert into sucursales(nombre,direccion_fiscal,id_empresa,delete)
 values(new.nombre,new.direccion_fiscal,new.id,false)
 returning id into new_id_sucursal;

 insert into almacen(id_sucursal,delete,nombre)
 values(new_id_sucursal,false,'Almacen principal');

 insert into caja (descripcion,id_sucursal,delete)
 values('Caja principal',new_id_sucursal,false)
 returning id into new_id_caja;


 insert into asignacion_sucursal(id_sucursal,id_usuario,id_caja)
 values(new_id_sucursal,new_id_usuario,new_id_caja);


 insert into categorias(nombre,color,icono,id_empresa)
 values('General','#FEC701','-',new.id)
  returning id into new_id_categoria;

 insert into productos(nombre,precio_venta,precio_compra,id_categoria, codigo_barras,codigo_interno,id_empresa)
 values ('Producto de prueba',10,5,new_id_categoria,'123456789','000123456',new.id);

 insert into clientes_proveedores(nombres,id_empresa)
 values ('Generico',new.id);

--agregar 4 metodos de pago por defecto
 insert into metodos_pago(nombre,id_empresa)
 values ('Efectivo',new.id);

  insert into metodos_pago(nombre,id_empresa)
 values ('Tarjeta',new.id);

 insert into metodos_pago(nombre,id_empresa)
 values ('Transferencia',new.id);

  insert into metodos_pago(nombre,id_empresa)
 values ('Mixto',new.id);

 return new;
end$$;


ALTER FUNCTION public.insertpordefecto() OWNER TO postgres;

--
-- TOC entry 415 (class 1255 OID 257330)
-- Name: mostrarcajasabiertasporempresa(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarcajasabiertasporempresa(_id_empresa integer) RETURNS TABLE(id_cierre_caja integer, id_caja integer, usuario text, rol text)
    LANGUAGE sql
    AS $$
  select cierrecaja.id as id_cierre_caja, cierrecaja.id_caja,usuarios.nombres as usuario,roles.nombre as rol
  from cierrecaja
  inner join caja on caja.id = cierrecaja.id_caja
  inner join sucursales on sucursales.id = caja.id_sucursal
  inner join usuarios on usuarios.id=cierrecaja.id_usuario
  inner join roles on roles.id = usuarios.id_rol
  where cierrecaja.estado = 0
    and sucursales.id_empresa = _id_empresa
$$;


ALTER FUNCTION public.mostrarcajasabiertasporempresa(_id_empresa integer) OWNER TO postgres;

--
-- TOC entry 526 (class 1255 OID 242208)
-- Name: mostrarcajasabiertasporsucursal(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarcajasabiertasporsucursal(_id_sucursal integer) RETURNS TABLE(id_cierre_caja integer, id_caja integer, usuario text, rol text)
    LANGUAGE sql
    AS $$
  select cierrecaja.id as id_cierre_caja, cierrecaja.id_caja,usuarios.nombres as usuario,roles.nombre as rol
  from cierrecaja
  inner join caja on caja.id = cierrecaja.id_caja
  inner join sucursales on sucursales.id = caja.id_sucursal
  inner join usuarios on usuarios.id=cierrecaja.id_usuario
  inner join roles on roles.id = usuarios.id_rol
  where cierrecaja.estado = 0
    and caja.id_sucursal = _id_sucursal
$$;


ALTER FUNCTION public.mostrarcajasabiertasporsucursal(_id_sucursal integer) OWNER TO postgres;

--
-- TOC entry 636 (class 1255 OID 227360)
-- Name: mostrarcajasasignadas(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarcajasasignadas(_id_usuario integer) RETURNS TABLE(id integer, sucursal_caja text, id_caja text, id_sucursal integer)
    LANGUAGE sql
    AS $$
    SELECT
     ac.id,
      CONCAT(s.nombre, ' - ', c.descripcion) AS sucursal_caja,ac.id_caja,ac.id_sucursal
     
    FROM asignacion_sucursal ac inner join caja c on ac.id_caja=c.id
    inner join sucursales s on s.id=ac.id_sucursal 
    WHERE ac.id_usuario = _id_usuario;

$$;


ALTER FUNCTION public.mostrarcajasasignadas(_id_usuario integer) OWNER TO postgres;

--
-- TOC entry 458 (class 1255 OID 227593)
-- Name: mostrarcierrecajaabierta(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarcierrecajaabierta(_id_caja integer) RETURNS TABLE(id integer, id_sucursal integer, id_caja integer, id_usuario integer, fechainicio timestamp without time zone, fechacierre timestamp without time zone, caja text, sucursal text, estado_cierre_caja integer, usuario text, roluser text)
    LANGUAGE sql
    AS $$
    SELECT cc.id,c.id_sucursal,cc.id_caja,cc.id_usuario,cc.fechainicio,cc.fechacierre,c.descripcion as caja,s.nombre as sucursal,cc.estado as estado_cierre_caja,
    u.nombres,r.nombre as rol

    FROM cierrecaja cc inner join caja c on c.id=cc.id_caja
     inner join sucursales s on c.id_sucursal = s.id inner join usuarios as u on u.id=cc.id_usuario
     inner join roles r on r.id = u.id_rol
    where cc.estado = 0 and cc.id_caja = _id_caja;

$$;


ALTER FUNCTION public.mostrarcierrecajaabierta(_id_caja integer) OWNER TO postgres;

--
-- TOC entry 648 (class 1255 OID 29474)
-- Name: mostrardetalleventa(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrardetalleventa(_id_venta integer) RETURNS TABLE(producto text, precio_venta numeric, cantidad numeric, estado text, total numeric, id integer)
    LANGUAGE sql
    AS $$
select p.nombre as producto,dv.precio_venta,dv.cantidad,dv.estado,dv.total,dv.id from detalle_venta as dv
inner join productos as p on p.id=dv.id_producto
inner join sucursales as s on s.id=dv.id_sucursal

where dv.id_venta = _id_venta;
$$;


ALTER FUNCTION public.mostrardetalleventa(_id_venta integer) OWNER TO postgres;

--
-- TOC entry 311 (class 1259 OID 29475)
-- Name: empresa; Type: TABLE; Schema: public; Owner: postgres
--

--
-- TOC entry 647 (class 1255 OID 29492)
-- Name: mostrarempresaxiduser(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarempresaxiduser(_id_usuario integer) RETURNS TABLE(result public.empresa)
    LANGUAGE sql
    AS $$
with user_role as (
  select r.nombre as rol
  from usuarios u
  inner join roles r on u.id_rol = r.id
  where u.id = _id_usuario
)
select *
from (
  -- Caso 1: Si el usuario es 'superadmin'
  select *
  from empresa
  where empresa.id_usuario = _id_usuario
  
  union
  
  -- Caso 2: Si el usuario NO es 'superadmin'
  select empresa.*
  from asignacion_sucursal
  inner join usuarios on usuarios.id = asignacion_sucursal.id_usuario
  inner join sucursales on sucursales.id = asignacion_sucursal.id_sucursal
  inner join empresa on empresa.id = sucursales.id_empresa
  where asignacion_sucursal.id_usuario = _id_usuario
) result
where exists (
  select 1
  from user_role
  where (rol = 'superadmin') -- Solo valida el rol aquí
     or (rol <> 'superadmin') -- O cualquier otro rol
);
$$;


ALTER FUNCTION public.mostrarempresaxiduser(_id_usuario integer) OWNER TO postgres;

--
-- TOC entry 483 (class 1255 OID 109164)
-- Name: mostrarmovimientoscajalive(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarmovimientoscajalive(_id_empresa integer) RETURNS TABLE(usuario_nombre text, tipo_movimiento text, monto numeric, descripcion text, fecha_movimiento text, caja_nombre text, sucursal_nombre text, id integer)
    LANGUAGE sql
    AS $$
SELECT 
    u.nombres AS usuario_nombre,
    mc.tipo_movimiento,
    mc.monto,
    mc.descripcion,
    TO_CHAR(mc.fecha_movimiento,'DD-MM-YYYY HH24:MI:SS') as fecha_movimiento,
    c.descripcion AS caja_nombre,
    s.nombre AS sucursal_nombre,
    mc.id as id_mov_caja
FROM 
    movimientos_caja mc
INNER JOIN 
    cierrecaja cc ON mc.id_cierre_caja = cc.id
INNER JOIN 
    caja c ON cc.id_caja = c.id
INNER JOIN 
    sucursales s ON c.id_sucursal = s.id
INNER JOIN 
    usuarios u ON mc.id_usuario = u.id
WHERE 
    s.id_empresa = _id_empresa
ORDER BY 
    mc.fecha_movimiento DESC
LIMIT 10;
$$;


ALTER FUNCTION public.mostrarmovimientoscajalive(_id_empresa integer) OWNER TO postgres;

--
-- TOC entry 670 (class 1255 OID 29493)
-- Name: mostrarproductos(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarproductos(_id_empresa integer) RETURNS TABLE(id integer, nombre text, precio_venta numeric, precio_compra numeric, id_categoria integer, sevende_por text, codigo_barras text, codigo_interno text, id_empresa integer, maneja_inventarios boolean, maneja_multiprecios boolean, p_venta text, p_compra text, categoria text)
    LANGUAGE sql
    AS $$
select p.id,
 p.nombre,p.precio_venta,p.precio_compra,p.id_categoria,p.sevende_por,p.codigo_barras,p.codigo_interno,p.id_empresa,p.maneja_inventarios,p.maneja_multiprecios,concat(e.simbolo_moneda,' ', p.precio_venta) as p_venta,concat(e.simbolo_moneda,' ', p.precio_compra) as p_compra,c.nombre as categoria
  from productos as p inner join empresa as e on e.id=p.id_empresa
  inner join categorias as c on c.id=p.id_categoria
  where p.id_empresa=_id_empresa;
$$;


ALTER FUNCTION public.mostrarproductos(_id_empresa integer) OWNER TO postgres;

--
-- TOC entry 645 (class 1255 OID 29494)
-- Name: mostrarsucursalesasignadas(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarsucursalesasignadas(_id_usuario integer) RETURNS TABLE(id_sucursal integer, sucursal text, id_usuario integer, id_asignacion_sucursal integer)
    LANGUAGE sql
    AS $$
select s.id as id_sucursal,  s.nombre as sucursal,a.id_usuario,a.id as id_asignacion_sucursal  from 
asignacion_sucursal as a inner join sucursales
 as s on s.id=a.id_sucursal
 where a.id_usuario = _id_usuario;
$$;


ALTER FUNCTION public.mostrarsucursalesasignadas(_id_usuario integer) OWNER TO postgres;

--
-- TOC entry 504 (class 1255 OID 109208)
-- Name: mostrartop10productosmasvendidosxmonto(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrartop10productosmasvendidosxmonto(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS TABLE(id_producto integer, nombre_producto text, total_vendido numeric, porcentaje numeric)
    LANGUAGE sql
    AS $$
   with top_productos as (
      select dv.id_producto,
      p.nombre as nombre_producto,
      SUM(dv.total) as total_vendido
      from detalle_venta as dv
      inner join 
      ventas as v
      on
      dv.id_venta = v.id
      inner join 
      productos as p
      on 
      dv.id_producto = p.id
      where 
      v.id_empresa = _id_empresa
      and DATE(v.fecha) >= DATE(_fecha_inicio)
      and DATE(v.fecha) <= DATE(_fecha_fin)
      group by 
       dv.id_producto,p.nombre
      order by 
      total_vendido desc
      limit 10
   ),
 total_general as (
    select 
       SUM(total_vendido) as total
       from top_productos
 )
 select 
    tp.id_producto,
    tp.nombre_producto,
    tp.total_vendido,
    ROUND((tp.total_vendido/tg.total) * 100, 2) as porcentaje
 from
  top_productos tp,
  total_general tg;
$$;


ALTER FUNCTION public.mostrartop10productosmasvendidosxmonto(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 501 (class 1255 OID 109187)
-- Name: mostrartop5productosmasvendidosxcantidad(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrartop5productosmasvendidosxcantidad(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS TABLE(id_producto integer, nombre_producto text, total_vendido numeric, porcentaje numeric)
    LANGUAGE sql
    AS $$
   with top_productos as (
      select dv.id_producto,
      p.nombre as nombre_producto,
      SUM(dv.cantidad) as total_vendido
      from detalle_venta as dv
      inner join 
      ventas as v
      on
      dv.id_venta = v.id
      inner join 
      productos as p
      on 
      dv.id_producto = p.id
      where 
      v.id_empresa = _id_empresa
      and DATE(v.fecha) >= DATE(_fecha_inicio)
      and DATE(v.fecha) <= DATE(_fecha_fin)
      group by 
       dv.id_producto,p.nombre
      order by 
      total_vendido desc
      limit 5
   ),
 total_general as (
    select 
       SUM(total_vendido) as total
       from top_productos
 )
 select 
    tp.id_producto,
    tp.nombre_producto,
    tp.total_vendido,
    ROUND((tp.total_vendido/tg.total) * 100, 2) as porcentaje
 from
  top_productos tp,
  total_general tg;
$$;


ALTER FUNCTION public.mostrartop5productosmasvendidosxcantidad(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 464 (class 1255 OID 121525)
-- Name: mostrarusuariosasignados(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarusuariosasignados(_id_empresa integer) RETURNS TABLE(id_asignacion integer, id_usuario integer, usuario text, sucursal text, caja text, rol text, email text, estadouser text)
    LANGUAGE sql
    AS $$
select asignacion_sucursal.id as id_asignacion,
 usuarios.id as id_usuario,
  usuarios.nombres as usuario,
sucursales.nombre as sucursal, 
caja.descripcion as caja,
 roles.nombre as rol , 
 usuarios.correo as email , 
 usuarios.estado as estadouser 
 from asignacion_sucursal 
inner join sucursales on asignacion_sucursal.id_sucursal = sucursales.id
inner join usuarios on asignacion_sucursal.id_usuario = usuarios.id
inner join roles on usuarios.id_rol = roles.id
inner join caja on asignacion_sucursal.id_caja = caja.id
  where sucursales.id_empresa=_id_empresa and roles.nombre!='superadmin';
$$;


ALTER FUNCTION public.mostrarusuariosasignados(_id_empresa integer) OWNER TO postgres;

--
-- TOC entry 411 (class 1255 OID 240605)
-- Name: mostrarventasporsucursalfechas(integer, date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.mostrarventasporsucursalfechas(_id_sucursal integer, _fecha_inicio date, _fecha_fin date) RETURNS SETOF public.ventas
    LANGUAGE sql
    AS $$
  select *
  from ventas
  where id_sucursal = _id_sucursal
    and estado = 'confirmada'
    and fecha::date between _fecha_inicio and _fecha_fin
$$;


ALTER FUNCTION public.mostrarventasporsucursalfechas(_id_sucursal integer, _fecha_inicio date, _fecha_fin date) OWNER TO postgres;

--
-- TOC entry 461 (class 1255 OID 64258)
-- Name: obtenertotalescaja(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.obtenertotalescaja(p_id_caja integer) RETURNS TABLE(total_ventas numeric, total_ingresos numeric, total_egresos numeric, total_ventas_efectivo numeric, total_ventas_credito numeric, total_ventas_tarjeta numeric)
    LANGUAGE plpgsql
    AS $$
BEGIN
 RETURN QUERY
    SELECT
        -- Subconsulta para evitar duplicación de ventas
        (SELECT COALESCE(SUM(v.monto_total), 0)
         FROM ventas v
         WHERE v.id_caja = p_id_caja  AND v.estado = 'confirmada'
           AND v.fecha BETWEEN cc.fechainicio AND NOW()) AS total_ventas,

        -- Subconsulta para sumar solo los ingresos
        (SELECT COALESCE(SUM(isc.monto), 0)
         FROM ingresos_salidas_caja isc
         WHERE isc.id_caja = p_id_caja 
           AND isc.tipo = 'ingreso'
           AND isc.fecha BETWEEN cc.fechainicio AND NOW()) AS total_ingresos,

        -- Subconsulta para sumar solo los egresos
        (SELECT COALESCE(SUM(isc.monto), 0)
         FROM ingresos_salidas_caja isc
         WHERE isc.id_caja = p_id_caja 
           AND isc.tipo = 'salida'
           AND isc.fecha BETWEEN cc.fechainicio AND NOW()) AS total_egresos,

        -- Total de ventas en efectivo
        (SELECT COALESCE(SUM(v.monto_total), 0)
         FROM ventas v
         WHERE v.id_caja = p_id_caja
           AND v.efectivo > 0
           AND v.estado = 'confirmada'
           AND v.fecha BETWEEN cc.fechainicio AND NOW()) AS total_ventas_efectivo,

        -- Total de ventas en crédito
        (SELECT COALESCE(SUM(v.monto_total), 0)
         FROM ventas v
         WHERE v.id_caja = p_id_caja
           AND v.credito > 0
           AND v.estado = 'confirmada'
           AND v.fecha BETWEEN cc.fechainicio AND NOW()) AS total_ventas_credito,

        -- Total de ventas en tarjeta
        (SELECT COALESCE(SUM(v.monto_total), 0)
         FROM ventas v
         WHERE v.id_caja = p_id_caja
           AND v.tarjeta > 0
           AND v.estado = 'confirmada'
           AND v.fecha BETWEEN cc.fechainicio AND NOW()) AS total_ventas_tarjeta   

    FROM cierrecaja cc
    WHERE cc.id_caja = p_id_caja;
END;
$$;


ALTER FUNCTION public.obtenertotalescaja(p_id_caja integer) OWNER TO postgres;

--
-- TOC entry 485 (class 1255 OID 214038)
-- Name: reducirstock(integer, numeric); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.reducirstock(_id integer, cantidad numeric) RETURNS void
    LANGUAGE plpgsql
    AS $$
 DECLARE stock_actual numeric;
BEGIN
        SELECT s.stock 
        INTO stock_actual
        FROM stock s 
        WHERE id = _id;
         IF stock_actual < cantidad then 
             RAISE EXCEPTION 'Stock insuficiente para este producto';
         else     
           UPDATE stock SET stock = stock - cantidad WHERE id = _id;
         end if;
END;
$$;


ALTER FUNCTION public.reducirstock(_id integer, cantidad numeric) OWNER TO postgres;

--
-- TOC entry 410 (class 1255 OID 223350)
-- Name: report_stock_bajo_minimo(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.report_stock_bajo_minimo(sucursal_id integer, almacen_id integer) RETURNS TABLE(codigo_articulo text, descripcion_articulo text, stock numeric, stock_minimo numeric, precio_costo numeric, total numeric)
    LANGUAGE sql
    AS $$
SELECT 
    p.codigo_interno AS codigo_articulo,
    p.nombre AS descripcion_articulo,
    s.stock,
    s.stock_minimo,
    p.precio_compra AS precio_costo,
    (s.stock * p.precio_compra) AS total
FROM stock s
INNER JOIN almacen a ON s.id_almacen = a.id
INNER JOIN productos p ON s.id_producto = p.id
WHERE a.id_sucursal = sucursal_id
AND a.id = almacen_id
AND s.stock < s.stock_minimo;  -- 🔥 SOLO PRODUCTOS CON STOCK BAJO MÍNIMO
$$;


ALTER FUNCTION public.report_stock_bajo_minimo(sucursal_id integer, almacen_id integer) OWNER TO postgres;

--
-- TOC entry 441 (class 1255 OID 220974)
-- Name: report_stock_por_almacen_sucursal(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.report_stock_por_almacen_sucursal(sucursal_id integer, almacen_id integer) RETURNS TABLE(codigo_articulo text, descripcion_articulo text, stock numeric, precio_costo numeric, total numeric)
    LANGUAGE sql
    AS $$
SELECT 
    p.codigo_interno AS codigo_articulo,
    p.nombre AS descripcion_articulo,
    s.stock,
    p.precio_compra AS precio_costo,
    (s.stock * p.precio_compra) AS total
FROM stock s
INNER JOIN almacen a ON s.id_almacen = a.id
INNER JOIN productos p ON s.id_producto = p.id
WHERE a.id_sucursal = sucursal_id
AND a.id = almacen_id;
$$;


ALTER FUNCTION public.report_stock_por_almacen_sucursal(sucursal_id integer, almacen_id integer) OWNER TO postgres;

--
-- TOC entry 471 (class 1255 OID 222214)
-- Name: report_ventas_por_sucursal(integer, date, date); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.report_ventas_por_sucursal(sucursal_id integer, fecha_inicio date, fecha_fin date) RETURNS TABLE(id_venta integer, fecha timestamp without time zone, monto_total numeric, total_impuestos numeric, subtotal numeric, saldo numeric, pago_con text, cantidad_productos integer, id_usuario integer, cajero text, id_cliente integer, estado text)
    LANGUAGE sql
    AS $$
SELECT 
    v.id AS id_venta,
    (v.fecha) AS fecha,  -- 🔥 Se convierte a solo fecha
    v.monto_total,
    v.total_impuestos,
    v.sub_total AS subtotal,
    v.saldo,
    v.pago_con,
    v.cantidad_productos,
    v.id_usuario,
    u.nombres AS cajero,
    v.id_cliente,
    v.estado
FROM ventas v
INNER JOIN usuarios u ON v.id_usuario = u.id
WHERE v.id_sucursal = sucursal_id
AND DATE(v.fecha) BETWEEN fecha_inicio AND fecha_fin; -- 🔥 Se filtra solo por día
$$;


ALTER FUNCTION public.report_ventas_por_sucursal(sucursal_id integer, fecha_inicio date, fecha_fin date) OWNER TO postgres;

--
-- TOC entry 446 (class 1255 OID 233863)
-- Name: setdefaultserializacion(integer, integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.setdefaultserializacion(_id integer, _id_sucursal integer) RETURNS void
    LANGUAGE plpgsql
    AS $$
begin 
  UPDATE serializacion_comprobantes
  SET por_default = false
   where sucursal_id=_id_sucursal;

    UPDATE serializacion_comprobantes
    SET por_default = true
     WHERE id = _id;
end;
$$;


ALTER FUNCTION public.setdefaultserializacion(_id integer, _id_sucursal integer) OWNER TO postgres;

--
-- TOC entry 616 (class 1255 OID 83006)
-- Name: sumarefectivosinventasmovcierrecaja(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sumarefectivosinventasmovcierrecaja(_id_cierre_caja integer) RETURNS TABLE(tipo_movimiento text, monto numeric)
    LANGUAGE sql
    AS $$
SELECT 
   mc.tipo_movimiento,SUM(mc.monto) as monto
FROM 
  movimientos_caja AS mc
INNER JOIN 
  cierrecaja AS cc 
ON 
  mc.id_cierre_caja = cc.id
inner join metodos_pago as mp 
on
  mc.id_metodo_pago = mp.id  
WHERE 
  mp.nombre = 'Efectivo' and mc.id_ventas is null
  AND mc.id_cierre_caja = _id_cierre_caja and cc.estado=0
group by mc.tipo_movimiento
$$;


ALTER FUNCTION public.sumarefectivosinventasmovcierrecaja(_id_cierre_caja integer) OWNER TO postgres;

--
-- TOC entry 495 (class 1255 OID 223465)
-- Name: sumarnoefectivosinventasmovcierrecaja(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sumarnoefectivosinventasmovcierrecaja(_id_cierre_caja integer) RETURNS TABLE(tipo_movimiento text, monto numeric, metodo text)
    LANGUAGE sql
    AS $$
SELECT 
   mc.tipo_movimiento,SUM(mc.monto) as monto, mp.nombre as metodo
FROM 
  movimientos_caja AS mc
INNER JOIN 
  cierrecaja AS cc 
ON 
  mc.id_cierre_caja = cc.id
inner join metodos_pago as mp 
on
  mc.id_metodo_pago = mp.id  
WHERE 
  mp.nombre != 'Efectivo' and mc.id_ventas is null
  AND mc.id_cierre_caja = _id_cierre_caja and cc.estado=0
group by mc.tipo_movimiento, mp.nombre
$$;


ALTER FUNCTION public.sumarnoefectivosinventasmovcierrecaja(_id_cierre_caja integer) OWNER TO postgres;

--
-- TOC entry 494 (class 1255 OID 82820)
-- Name: sumarventasmetodopagomovcierrecaja(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sumarventasmetodopagomovcierrecaja(_id_cierre_caja integer) RETURNS TABLE(metodo_pago text, monto numeric)
    LANGUAGE sql
    AS $$
select mp.nombre as metodo_pago, SUM(CASE WHEN mp.nombre='Efectivo' THEN mc.monto - mc.vuelto ELSE mc.monto END ) as monto from
movimientos_caja as mc
inner join cierrecaja as cc 
on
mc.id_cierre_caja = cc.id
inner join metodos_pago as mp
on mc.id_metodo_pago = mp.id
where mc.id_ventas is not  null
and mc.id_cierre_caja = _id_cierre_caja and cc.estado = 0
group by mp.nombre

$$;


ALTER FUNCTION public.sumarventasmetodopagomovcierrecaja(_id_cierre_caja integer) OWNER TO postgres;

--
-- TOC entry 409 (class 1255 OID 95317)
-- Name: sumarventasporempresa(integer, timestamp without time zone, timestamp without time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sumarventasporempresa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) RETURNS numeric
    LANGUAGE sql
    AS $$
SELECT 
    COALESCE(SUM(v.monto_total), 0) -- Asegura que retorne 0 si no hay ventas
FROM 
    ventas AS v
WHERE 
    v.id_empresa = _id_empresa
    AND v.fecha >= _fecha_inicio
    AND v.fecha <= _fecha_fin;
$$;


ALTER FUNCTION public.sumarventasporempresa(_id_empresa integer, _fecha_inicio timestamp without time zone, _fecha_fin timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 642 (class 1255 OID 29495)
-- Name: updateuseinventariosproductos(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.updateuseinventariosproductos() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
 update productos
 set maneja_inventarios=false
 where id=old.id_producto;
 return old;
end
$$;


ALTER FUNCTION public.updateuseinventariosproductos() OWNER TO postgres;

--
-- TOC entry 468 (class 1255 OID 151971)
-- Name: validarstock(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.validarstock() RETURNS trigger
    LANGUAGE plpgsql
    AS $$DECLARE
    stock_actual numeric;
BEGIN
    -- Verificar si el producto maneja inventarios
    IF (SELECT p.maneja_inventarios FROM productos p WHERE p.id = NEW.id_producto) THEN
        -- Obtener el stock actual
        SELECT s.stock 
        INTO stock_actual
        FROM stock s 
        WHERE s.id_producto = NEW.id_producto 
          AND s.id_almacen = NEW.id_almacen;

        -- Incremento en cantidad
        IF TG_OP = 'UPDATE' AND NEW.cantidad > OLD.cantidad THEN
            -- Verificar si hay suficiente stock disponible para incrementar
            IF stock_actual < (NEW.cantidad - OLD.cantidad) THEN
                RAISE EXCEPTION 'Stock insuficiente para el producto %', NEW.descripcion;
            ELSE
                -- Descontar solo el incremento de cantidad
                UPDATE stock 
                SET stock = stock - (NEW.cantidad - OLD.cantidad)
                WHERE id_producto = NEW.id_producto 
                  AND id_almacen = NEW.id_almacen;
                insert into movimientos_stock (id_almacen,id_producto,tipo_movimiento,cantidad,fecha,detalle,origen)
                values(new.id_almacen,new.id_producto,'salida',new.cantidad,now(),'se edito el detalle de venta','ventas');
            END IF;
        END IF;

        -- Decremento en cantidad
        IF TG_OP = 'UPDATE' AND NEW.cantidad < OLD.cantidad THEN
            -- Aumentar el stock con la cantidad reducida
            UPDATE stock 
            SET stock = stock + (OLD.cantidad - NEW.cantidad)
            WHERE id_producto = NEW.id_producto 
              AND id_almacen = NEW.id_almacen;
            insert into movimientos_stock (id_almacen,id_producto,tipo_movimiento,cantidad,fecha,detalle,origen)
            values(new.id_almacen,new.id_producto,'ingreso',new.cantidad,now(),'se edito el detalle de venta','ventas');
        END IF;

        -- Inserción de nueva cantidad
        IF TG_OP = 'INSERT' THEN
            -- Verificar si hay suficiente stock para la cantidad solicitada
            IF stock_actual < NEW.cantidad THEN
                RAISE EXCEPTION 'Stock insuficiente para el producto %', NEW.descripcion;
            ELSE
                -- Descontar el stock directamente
                UPDATE stock 
                SET stock = stock - NEW.cantidad
                WHERE id_producto = NEW.id_producto 
                  AND id_almacen = NEW.id_almacen;
                insert into movimientos_stock (id_almacen,id_producto,tipo_movimiento,cantidad,fecha,detalle,origen)
                values(new.id_almacen,new.id_producto,'ingreso',new.cantidad,now(),'nuevo registro','ventas');
            END IF;
        END IF;

       
    END IF;

    RETURN NEW;
END;$$;


ALTER FUNCTION public.validarstock() OWNER TO postgres;

--




--
-- TOC entry 4137 (class 2620 OID 274186)
-- Name: ventas asignarclientegenericotriggerupdate; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER asignarclientegenericotriggerupdate AFTER UPDATE ON public.ventas FOR EACH ROW EXECUTE FUNCTION public.asignarclientegenerico();





--
-- TOC entry 4127 (class 2606 OID 144140)
-- Name: almacen almacen_id_sucursal_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--



-- TOC entry 386 (class 1259 OID 227054)
-- Name: _id_usuario; Type: TABLE; Schema: public; Owner: postgres
--

--
-- TOC entry 4136 (class 2620 OID 29952)
-- Name: ventas asignarclientegenericotrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER asignarclientegenericotrigger AFTER INSERT ON public.ventas FOR EACH ROW EXECUTE FUNCTION public.asignarclientegenerico();



--
-- TOC entry 4138 (class 2620 OID 117140)
-- Name: caja insertarimpresoratrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER insertarimpresoratrigger AFTER INSERT ON public.caja FOR EACH ROW EXECUTE FUNCTION public.insertarimpresora();


--
-- TOC entry 4134 (class 2620 OID 247976)
-- Name: sucursales insertarserializacionestrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER insertarserializacionestrigger AFTER INSERT ON public.sucursales FOR EACH ROW EXECUTE FUNCTION public.insertarserializaciones();


--
-- TOC entry 4130 (class 2620 OID 29956)
-- Name: empresa pordefectotrigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER pordefectotrigger AFTER INSERT ON public.empresa FOR EACH ROW EXECUTE FUNCTION public.insertpordefecto();


--
-- TOC entry 4131 (class 2620 OID 155330)
-- Name: detalle_venta triggerdevolverstockaleliminardv; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER triggerdevolverstockaleliminardv AFTER DELETE ON public.detalle_venta FOR EACH ROW EXECUTE FUNCTION public.devolverstockaleliminardv();


--
-- TOC entry 4132 (class 2620 OID 153340)
-- Name: detalle_venta triggereliminardetalleventa; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER triggereliminardetalleventa AFTER UPDATE ON public.detalle_venta FOR EACH ROW EXECUTE FUNCTION public.deletedetalleventa();


--
-- TOC entry 4135 (class 2620 OID 167736)
-- Name: usuarios triggerinsertarpermisohome; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER triggerinsertarpermisohome AFTER INSERT ON public.usuarios FOR EACH ROW EXECUTE FUNCTION public.insertarpermisohome();


--
-- TOC entry 4133 (class 2620 OID 151996)
-- Name: detalle_venta triggervalidarstock; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER triggervalidarstock BEFORE INSERT OR UPDATE ON public.detalle_venta FOR EACH ROW EXECUTE FUNCTION public.validarstock();



INSERT INTO public.modulos VALUES (16, 'Ventas', false, '-', '-', '/pos', '#operacion');
INSERT INTO public.modulos VALUES (15, 'Configuracion', false, '-', '-', '/configuracion', '#operacion');
INSERT INTO public.modulos VALUES (18, 'Cobrar venta', false, '-', '-', '-', '#operacion');
INSERT INTO public.modulos VALUES (9, 'Impresoras', false, 'gestiona tus comprobantes de pago', 'https://qkzybkelsdmoezaaypou.supabase.co/storage/v1/object/public/imagenes/modulos/impresora.png', '/configuracion/impresoras', '#configuracion');
INSERT INTO public.modulos VALUES (3, 'Empresa', false, 'configura tu empresa', 'https://i.ibb.co/S0pkQWF/comercio-y-compras.png', '/configuracion/empresa', '#configuracion');
INSERT INTO public.modulos VALUES (1, 'Categorias de productos', false, 'asigna categorias a tus productos', 'https://i.ibb.co/VYbMRLZ/categoria.png', '/configuracion/categorias', '#configuracion');
INSERT INTO public.modulos VALUES (2, 'Productos', false, 'registra tus productos', 'https://i.ibb.co/85zJ6yG/caja-del-paquete.png', '/configuracion/productos', '#configuracion');
INSERT INTO public.modulos VALUES (4, 'Clientes', false, 'gestiona tus clientes', 'https://i.ibb.co/g4YBrpf/satisfecho.png', '/configuracion/clientes', '#configuracion');
INSERT INTO public.modulos VALUES (5, 'Proveedores', false, 'gestiona tus proveedores', 'https://i.ibb.co/q5rjxjG/proveedor.png', '/configuracion/proveedores', '#configuracion');
INSERT INTO public.modulos VALUES (6, 'Métodos de pago', false, 'gestiona tus métodos de pago', 'https://i.ibb.co/PtjvQkB/transferencia-movil.png', '/configuracion/metodospago', '#configuracion');
INSERT INTO public.modulos VALUES (7, 'Sucursales y cajas', false, 'gestiona tus sucursales y cajas', 'https://qkzybkelsdmoezaaypou.supabase.co/storage/v1/object/public/imagenes/modulos/sucursales.png?t=2024-12-01T12%3A56%3A08.233Z', '/configuracion/sucursalcaja', '#configuracion');
INSERT INTO public.modulos VALUES (8, 'Usuarios', false, 'gestiona tus usuarios', 'https://qkzybkelsdmoezaaypou.supabase.co/storage/v1/object/public/imagenes/modulos/escritorio-de-oficina.png?t=2024-12-01T12%3A58%3A35.579Z', '/configuracion/usuarios', '#configuracion');
INSERT INTO public.modulos VALUES (19, 'Empresa basicos', false, '-', '-', '/configuracion/empresa/empresabasicos', '#operacion');
INSERT INTO public.modulos VALUES (20, 'Empresa moneda', false, '-', '-', '/configuracion/empresa/monedaconfig', '#operacion');
INSERT INTO public.modulos VALUES (21, 'Almacenes', false, 'gestiona tus almacenes por sucursales', 'https://qkzybkelsdmoezaaypou.supabase.co/storage/v1/object/public/imagenes/modulos/almacen.png', '/configuracion/almacenes', '#configuracion');
INSERT INTO public.modulos VALUES (17, 'Dashboard', false, '-', '-', '/dashboard', '#operacion');
INSERT INTO public.modulos VALUES (22, 'Home', false, '-', '-', '/', '#default');
INSERT INTO public.modulos VALUES (23, 'Inventarios', false, '-', '-', '/inventario', '#operacion');
INSERT INTO public.modulos VALUES (24, 'Configuración de ticket', false, 'configura tu ticket personalizado', 'https://i.ibb.co/Z1BQHJ92/boleto.png', '/configuracion/ticket', '#configuracion');
INSERT INTO public.modulos VALUES (25, 'Serialización de comprobantes', false, 'serializa tus comprobantes', 'https://i.ibb.co/xtCdPGhx/factura-2.png', '/configuracion/serializacion', '#configuracion');


INSERT INTO public.roles VALUES (1, 'superadmin');
INSERT INTO public.roles VALUES (2, 'cajero');
INSERT INTO public.roles VALUES (3, 'admin');

INSERT INTO public.tipo_comprobantes VALUES (1, 'Factura', 'ventas');
INSERT INTO public.tipo_comprobantes VALUES (2, 'Crédito Fiscal', 'ventas');
INSERT INTO public.tipo_comprobantes VALUES (4, 'Nota de debito', '-');
INSERT INTO public.tipo_comprobantes VALUES (5, 'Consumidor Final', 'ventas');
INSERT INTO public.tipo_comprobantes VALUES (3, 'Nota de credito', '-');